Submission Title,Submission Url,Plain Description,Video,Website,File Url,Desired Prizes,Built With,Mlh Points   List All The Schools On Your Team!,Mlh Software Lab,Mlh Hardware Lab,Submitter Screen Name,Submitter First Name,Submitter Last Name,Submitter Email,College/Universities Of Team Members,Additional Team Member Count,Team Member 1 Screen Name,Team Member 1 First Name,Team Member 1 Last Name,Team Member 1 Email,...,,,,,,,,,,,
Venefits,https://bostonhacks-f2018.devpost.com/submissions/105697-venefits,"Inspiration

Veteran Reintegration Problems

What it does

Matches Veterans to Jobs with Military benefits based on their duties during their time in service.

How I built it

The web application parses data from various Job Search APIs in order to provide and match the most relevant data to a Veteran's job search query. We identified that veterans have unique needs and concerns when looking for employment, and created forms that allow Veterans to input pertinent data, such as military rank/paygrade. The application translates this data to a more traditional job search query and pulls the jobs that match the query and also provide relevant information for veterans. In doing so, making the job search overall less daunting for veterans. 

Challenges I ran into

Multi-platform integration

Accomplishments that I'm proud of

Working on a couple different platforms and pivoting as a team.

What I learned

We learned how to manage different Job Search APIs such as Indeed 

What's next for Venefits

Continue to optimize job placements for users.
",,https://github.com/mkshcode/venefits,,[TRACK] Giving Back to Veterans Prize,"html, css, javascript, bootstrap, json, node.js, sql","Boston University, Harvard Business School, Northeastern University",,,mkshcode,Michael,Kim,mk.sh204@gmail.com,"Temple University, Boston University, Northeastern University",3,tianaxh3113,Tiana,Huynh,tianaxh3113@gmail.com,jfriend,jack,friend,jfriend@bu.edu,skamlangjai,Suwimol,Kamlangjai,skamlangjai@gmail.com,,,,
Wiki Links,https://bostonhacks-f2018.devpost.com/submissions/105707-wiki-links,"Inspiration

Readability on wikipedia

What it does

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for Wiki Links
",,,https://s3.amazonaws.com/challengepost/zip_files/production/37840/zip_files/extract_wiki_links.c.zip,,c,McGill,,,joannambuck,joannambuck,,joannambuck@gmail.com,McGill University,1,hreed277,Hannah,Reed,hreed277@gmail.com,,,,,,,,,,,,
ScreenPro,https://bostonhacks-f2018.devpost.com/submissions/105712-screenpro,"Inspiration

I was tired of manually researching common indicators, and decided to automate the process to save myself time.

What it does

ScreenPro uses the IEX API with extensive caching to implement a simple syntax for building stock screeners. Simply load a universe of stocks (for example, S&P 500, top 3000 US stocks, and much more), and apply chained filters to narrow that universe down to a small subset of stocks that match your conditions.

For example, to obtain a list of S&P 500 stocks trading for more than $10 that have fallen more than 10% in the past day, you'd simply call Filter(u.sp500(), c).percent_change(-0.10, False).price(10, True).

How I built it

ScreenPro was built using Python 3.6 for the backend screener and API, and PHP for the frontend interface and cron worker.

Challenges I ran into

Initially, when running screens on large universes, up to 3000 HTTP requests may have been required. This led to very slow response times. This was solved by implementing an HTTP cache, and batching requests to minimize the number of unique requests.

Accomplishments that I'm proud of

The platform works, and I'm planning on using it personally after Boston Hacks.
",,,,ITG - Best Fintech Hack,"python, iex, php, requests, cache",University of Waterloo,,,interwho,Justin,Paulin,hello@justinpaulin.com,University of Waterloo,0,,,,,,,,,,,,,,,,
Wink,https://bostonhacks-f2018.devpost.com/submissions/105726-wink,"Inspiration

The team members were at a house party where there was quite a few people
and we were trying to take a group photo. However, there was alot of issues
with waiting for a timed camera, the camera going off when someone was
blinking and we would have to retake the picture multiple times.

What it does

Wink is a python script that uses OpenCV and Dlib facial feature detectors
to detect all the faces in a camera feed. It then measures to check if all
of the eyes are open and not blinking. When the program goes a few frames
without detecting a blink it will save the frame as a picture.
Thus reducing the possibility of someone having their eyes closed in a picture.

How we built it

python

Challenges we ran into

Our UI definitely needs alot more work as it is very simple.

We had trouble packaging python script as APK as we also had to figure out
how to get the APK to have all our dependencies.

Since we were not able to package this, we were unable to test it on a mobile
device and we suspect that there might be hardware limitations on mobile
platform

Accomplishments that we're proud of

Quickly learning how to use OpenCV and kivy in one day! 
Great communication and teamwork by everyone

What's next for Wink

Package as an Android APK/IOS application
integration into proper cameras
Better UI
",,https://github.com/YaanTzik/bostonhacks18_wink,https://s3.amazonaws.com/challengepost/zip_files/production/37847/zip_files/wink.zip,,"python, opencv, dlib, cmake, kivy",Boston University,,,YaanTzik,YaanTzik,,kanyaantzi@gmail.com,Boston University,3,vgunawan,Vivian,Gunawan,vgunawan@bu.edu,leonard2907,leonard2907,,leonardgunawan19@yahoo.com,adityawikara,adityawikara,,adityawikara@gmail.com,,,,
Battle Buddies,https://bostonhacks-f2018.devpost.com/submissions/105749-battle-buddies,"Inspiration

I have served as a Korean soldier in US Army for two years, and one of my jobs was to help my fellow soldiers to transition into a civilian. Sadly, most of them were helpless during the transition, not because they didn't try, but because they didn't know how to. This is why, based on my experience, we decided to make a platform that is much more accessible to veterans.

What it does

Those who see the veterans in need of help, or veterans themselves can send a simple text message to our system to get help for what they need to settle into the civilian life. Our system offers help with jobs, job trainings, consulting, and VA hospitals. Also, we made a web application to find the things I've just mentioned in a single page.

How we built it

We used Twilio to handle SMS flow from veterans to our Nodejs backend server. We saved SMS data and users' demographic data into database and posted the helps offered in the frontend forum.

Challenges we ran into

None of us had fullstack experience in JavaScript, so it was a challenge for us. We struggled a lot from it, but we also learned a lot as well.

Accomplishments that we're proud of

Unlike other applications, we used Twilio and SMS only as the only interface of our application. 

What's next for Battle Buddies

What we plan to do is getting the real data from veterans and NGOs to fill our forum with actual data. Also, we plan on applying similar methods to tutoring system for the general public. From this, we hope to relieve the overcrowded BU office hours. We desire to create a proper community where people could actively get involved, rather than just words of 'advice'.
",,https://github.com/WHYjun/battle-buddies,,"Spark! Fellowship Award, [Weekly Challenge] Best Social Good Hack from Fidelity, Twilio — Best use of Twilio API, [TRACK] Giving Back to Veterans Prize","node.js, javascript, html5, css3, twilio, express.js, mongodb",Boston University,,,soohyeok,Soo Hyeok,Lee,soohyeok@bu.edu,Boston University,4,WHYjun,Young Jun,Choi,yjunchoi93@gmail.com,ByoungsulLee,Byoungsul,Lee,leeb@bu.edu,sj0726,sj0726,,123a556@naver.com,aisora1222,aisora1222,,jewoolee@bu.edu
NotYourAverageBank,https://bostonhacks-f2018.devpost.com/submissions/105753-notyouraveragebank,"Inspiration: Tired of not having time to do full analysis on bank account, need to automate

What it does: Analyzes bank history for opportunities to invest and to save

How I built it: python and mainly pandas, for command line

Challenges I ran into: hard to use libraries

Accomplishments that I'm proud of: using statistics to get useful results from just bank account history

What I learned: the analytics are more complex than can be done in 24 hours

What's next for NotYourAverageBank: advanced feature implementation including savings goals (long term and short term) and predictive analytics for purchases
",,https://github.com/madjabal/notyouraveragebank,,"ITG - Best Fintech Hack, Best Domain Name from Domain.com","python, pandas, seaborn",Boston University,,,madjabal,madjabal,,madjabal@bu.edu,Boston University,1,jbassin,jbassin,,joshbassin98@gmail.com,,,,,,,,,,,,
doggo-disinfect,https://bostonhacks-f2018.devpost.com/submissions/105754-doggo-disinfect,"Doggo Disinfect

The goal was to build something fun and useful and learn about APIs along the way. We decided upon a Google Chrome extension that uses Clarifai's image classification API to tag images and then filter them based on whether or not the images met certain user-specified conditions.

Challenges and Future Directions

While we were able to build a minimum viable product, we ran into a key issue: on pages with many images, the number of API calls causes the load time to be extremely high, making it impractical. This may require reworking our entire model.
",,,,[Weekly Challenge] Best use of Clarifai’s API,"javascript, html",McGill University,,,TuOfTimes,Edward,Tu,edtuwork@gmail.com,McGill University,1,brendenkadota,brenden,kadota,brenden.kadota@gmail.com,,,,,,,,,,,,
Vetricle,https://bostonhacks-f2018.devpost.com/submissions/105758-vetricle,"Inspiration

When returning from deployment, veterans often feel estranged from society. Gone is the rigorous structure, clear-cut purpose, and sense of camaraderie found within in the armed forces. Our team aimed to tackle this problem in order to give back to those who selflessly serve our country.

What it does

The app matches veterans based on their interests, allowing them to chat and participate in activities. For example, veterans who are interested in getting their hands dirty with hardware or are curious about software development would be able to find a community of likeminded individuals. Furthermore, making connections or creating something tangible with others can bring purpose to veterans' life.

A user can sign up with their email or authenticate with their Facebook account. Afterwards, the user may find events nearby which are tailored to their interests. They would also be able to see if any fellow veterans are RSVP'd. Vets may also have the option to host their own event. Based on similar interests and activity, veterans may get friend recommendations. Lastly, veterans who opt-in can chat or meetup with nearby veterans.

How we built it

The website was built using React.js and the app was created using React Native. The backend was created using Python and Flask. The backend authenticator was built using React.js with Google Cloud's FireBase and FireCloud database. Data in the form of JSON's from the app or website are run through analytic scripts on Python that call IBM Watson's Apache Spark models on the Watson studio to do data analysis to create friend recommendations for veterans based on similar interests. If not available, it calls upon collaborative filtering methods to find user to user similarities. If we had more time, we would have incorporated a three-layer Neural Autoencoder made up of LSTM Recurrent Neural Network units that would be made on PyTorch and trained on Google Cloud with access to GPU acceleration for more accurate recommendation analysis as the number of users grows.

Challenges we ran into

-CSS issues and formatting JSON's in a correctly

-Getting the chatting service to work at force

-Large dimensionality of the dataset (if the number of users is large, it can be challenging to do analysis)

-Lack of information on using recommendation systems for data that isn't dependent on a rating system

-Not enough time to run PyTorch autoencoder model. 

Accomplishments that we're proud of

Designing a clean, cross-platform UI for the app, coming up with a consistent dataset for usernames and learning more about recommendation systems are all accomplishments we are proud of.

What I learned

We learned how to create an app using React Native which allows for simultaneous release on both iOS and android devices. The new members on our team also learned how to use Javascript, Adobe XD and utilize Git. We also learned how to do collaborative filtering and content based filtering which is heavily used in recommendation systems today as well as learning about deep learning techniques for recommendation systems today such as Restricted Boltzmann machines and Neural autoencoders.

What's next for Vetricle

We hope to increase the app's functionality and grow its userbase. We would also like to create a fully trained Neural Autoencoder model using a large set of data for more streamlined recommendations. Additionally, we would like to incorporate more factors for recommendations (i.e mutual friends).
",https://youtu.be/eQVBmxEVeI4,https://github.com/sonamghosh/boston_hacks_2018,https://s3.amazonaws.com/challengepost/zip_files/production/38024/zip_files/bhacks_2018.zip,"Best use of Algolia, IBM - Best Use of IBM Cloud, Best use of Google Cloud Platform, Best Domain Name from Domain.com, [TRACK] Giving Back to Veterans Prize","react, react-native, python, flask, algolia, pytorch, google-cloud, ibm-watson, firebase, pandas, love","Wentworth Institute of Technology, Boston University",,,luih,Halmon,Lui,luih@wit.edu,"Wentworth Institute of Technology, Boston University",3,sonamghosh,sonamghosh,,sonamghosh@gmail.com,mbuccat,Mariah,Buccat,mbuccat@bu.edu,nchen357,nchen357,,nchen357@bu.edu,,,,
Equal Neighborhoods,https://bostonhacks-f2018.devpost.com/submissions/105760-equal-neighborhoods,"Inspiration

OUR INSPIRATION

What it does

How we built it

Challenges we ran into

Due to time and hardware constraints, the outcome was not what we expected. In addition, we had limited data that led to limited training Given more time and more powerful computing power, we are confident the results will be more promising. 

Accomplishments that we're proud of

We created a platform that classifies sidewalk damages based on varying severity in the streets of Boston and prioritizes which maintenance reports to address first. We successfully implemented the Shine API by utilizing its total home score dataset to target damaged sidewalks near low road safety scores and prioritize their maintenance. Our web app allows pedestrians to safely walk on proper sidewalks which reduces the likelihood of road injuries, thus leading safer, more secure lives. We are also able to create a visual map of the severity of each sidewalk. We also create a map that depicts all the unresolved cases that can be added into the geographic map. 

What we learned


Learned how to use different API’s like Liberty Mutual’s Shine API.
Learned about simple machine learning algorithms and the general idea behind it. 
Gained more experience with preliminary image processing.


What's next for Equal Neighborhoods

Our next step of improving our project is to implement machine learning into our data analysis. Using machine learning, we will be able to analyze the severity of the damage of the sidewalks and determine which sidewalk to prioritize. We should also focus on improving our algorithm in determining which sidewalk to prioritize. We should put different weight on each variable instead of prioritizing one variable over another.  
",,http://equalneighborhoods.com/,,"Spark! Fellowship Award, [Weekly Challenge] Best Social Good Hack from Fidelity, Liberty Mutual  - Best Hack to Live Safe, [TRACK] Data for Urban Good Prize, Best Domain Name from Domain.com","javascript, html, css, photoshop, google-maps, jmp-pro-13, stata, rstudio, shine-api",Boston University,,,brianhe12,Brian,He,brian.he17@gmail.com,Boston University,4,ApolloLo,Apollo,Lo,apollol@bu.edu,nessa87878,Vanessa,Tsang,nessa87878@gmail.com,tky25,TK,Yuen,tky@bu.edu,bcjwong,Benjamin,Wong,bcjwong@bu.edu
AutoHome,https://bostonhacks-f2018.devpost.com/submissions/105761-autohome,"Inspiration

We invest a lot of time and money making our homes work for us. Right from buying the house and buying smart appliances that save power and give you more control over the way you want your house to be setup to be comfortable for you, there's a large cost and involvement required. You lose a lot of time doing simple tasks such as adjusting the lights or adjusting the temperature in the house. These everyday tasks have a lot of scope for automation. Our project AutoHome presents a smart home solution that works for you by automating these everyday tasks. AutoHome is more a cost-effective, more efficient solution to operate all the devices at a home, monitor and control them remotely and securely.

What it does

The AutoHome is a powered by a Raspberry Pi, which serves as a platform to connect various sensors to detect various aspects of the house such as light levels, CO levels, cooking gas levels, temperature and humidity, and controls these devices using a relay. When a user signs up for the service on our website, then enter a device identifier to identify the Pi they've connected to our service, which enables communication between the RasPi and the Firebase Realtime Database. The temperature, light levels and humidity data are fed to the Realtime Database to display to the user in real time. The user sets their temperature and humidity preferences in the web app, and the Pi checks with the database to accordingly use the AC/Heater/Humidifier/Lights to make the environment optimal for the user. 

How we built it

The Smart Home device is built with a Raspberry Pi that is connected to a MQ9 cooking gas sensor, MQ7 carbon monoxide sensor, TCS34725 light sensor, DHT11 temperature/humidity sensor and two relays. The data from the TCS34725 and the DHT11 is pushed to the Firebase Realtime database which stores all the information. The user interacts with a chatbot built using Twilio and Google Dialogflow. When the user asks about a particular place, we leverage the capability of the Shine API(by Liberty Mutual) and give the user information about the safety of the place.         

Challenges we ran into

We ran into various challenges throughout the course of the project. Getting all the hardware to work to gather with interrupts and timing all the loops to ensure nothing crashes was a lot of work. Integrating Twilio, Dialogflow and Firebase was quite difficult and taxing. Even at the end of the Hackathon, we were unable to get the Dialogflow Cloud Functions to work.

Accomplishments that we're proud of

We are proud to get all the hardware to work together to get the values from all the sensors. Further, working with Twilio and implementing a chatbot was awesome to achieve. 

What we learned

We learned a lot from this project. Integrating all the hardware and using them effectively using Python, using technologies such as Twilio, Firebase Firestore, and Dialogflow.

What's next for AutoHome

We feel that AutoHome has large scale applications for a lot of people and belongs in a lot of homes. We would like to conduct testing of this device in a home and collect user feedback and look at ways to allow the user to interact with in various ways, and to integrate more technologies.
",,https://github.com/rishab2113/AutoHome,,"Liberty Mutual  - Best Hack to Live Safe, [TRACK] The Smart Home prize, Best use of Google Cloud Platform, Twilio — Best use of Twilio API, Best Domain Name from Domain.com","node.js, twilio, shine-api, raspberry-pi, gas-sensor, temperature/humidity-sensor, light-sensor, relay, python, firebase, vue.js, google-dialogflow, carbon-monoxide-sensor","University of Massachusetts Amherst, Boston University, George Washington University","Domain.com,Google Cloud Platform",,abhinavtripathy,Abhinav,Tripathy,abhinavtripathy99@gmail.com,"University of Massachusetts Amherst, Boston University, George Washington University",3,rishab2113,Rishab,Nayak,rishab_nayak@yahoo.com,aTibrewala,Alok,Tibrewala,alok@gwu.edu,KennethJusino,Kenneth,Jusino,kennethj@bu.edu,,,,
Attractions!,https://bostonhacks-f2018.devpost.com/submissions/105764-attractions,"Webapp built with the Google Maps API. The idea was to display a map with markers to the current user, helping them to find attractions/restaurants/things to do in their area. The markers would display a description/info on the activity, as well as the amount of hearts it has (to show if others recommend it). Users would use the planner to pick activities, and after doing one, they could contribute and add their own input.  

We were able to implement some parts of our idea, but we also ran into quite a few challenges. However, we learned a lot in doing this project, and hope to continue working on it in the future!
",,https://github.com/kathy-tam/bostonHacks2018,,,"html, css, javascript",McGill University,,,kathytam,Kathy,Tam,kathy.tam@mail.mcgill.ca,McGill University,1,smcintyre890,smcintyre890,,sophiemcintyre@eastlink.ca,,,,,,,,,,,,
StreetJudge,https://bostonhacks-f2018.devpost.com/submissions/105776-streetjudge,"Inspiration

We loved the StreetCaster's mission to the city of Boston and its residence. Ever since the inception of the 311 application, a huge number of citizens have submitted reports to make Boston a better place to live. However, not all reports are equally useful to the city. Some may be incorrectly categorized, others may include inconclusive pictures, and some can just serve no purpose at all. We wanted to make a tool to help 311 handle these use cases so that StreetCaster is as successful as possible!

What it does

StreetJudge is a tool meant to detect incorrectly submitted reports. The application uses machine vision to evaluate the user-submitted photo and verifies if it matches the issue. For example, if the user submitted a report that includes a photo of a damaged sidewalk, SmartJudge will be able to validate if the sidewalk is indeed damaged or not through machine vision. The goal is to be able to eliminate, as much as possible, the number of incorrectly submitted reports so that the city can focus on the correct ones. With the goal achieved, 311 employees will save an incredible amount of time. Efficiency will upgrade and the cost of the operation will scale down as a result. 

How we built it

We used Python with Flask as our backend. Since the hack is meant to be an extension to the 311's reporting system, we didn't put a huge amount of emphasis into the frontend. Hence, we stuck to the very basics of HTML. For the machine vision, we have used Google's AutoML Vision to validate the photos. 

Challenges we ran into

It was our first time using Python-Flask for a web project. Even though it relatively simple in contrast to other languages/frameworks, we had spent the first few hours of the hackathon familiarizing ourselves with the setup process. Setting up Google Cloud was a lot more challenging, although we have managed after many walkthroughs.

Accomplishments that we're proud of

We were extremely proud of training a machine learning algorithm. It was our first time, and seeing the result of hundreds of images was extremely satisfying. Seeing how this can immediately improve the 311 system, we are very proud of this accomplishment!

What we learned

We have learned a great deal regarding Python-Flask. However, the greatest lesson was experiencing first-hand what machine learning can do to make our lives easier. Setting up models to train, selecting the pool of images to feed, and reviewing the results of the process what a very important experience. We can definitely see ourselves leveraging this technology in our future projects.

What's next for StreetJudge

We want StreetJudge to be a full-suite of validation tools. This doesn't just include machine vision, but also leveraging data from the 2014 census to visualize trends. Seeing how StreetCaster has huge potential, we feel the same about StreetJudge's contribution to the mission.
",https://www.youtube.com/watch?v=TxgasozFuOY&feature=youtu.be,https://github.com/KrishnaPatel1/bostonhacksfall18,,"[TRACK] Data for Urban Good Prize, Best use of Google Cloud Platform","python, flask, google-cloud, google-automl",Concordia,Google Cloud Platform,,KrishnaPatel1,Krishna,Patel,krishna.patel1@hotmail.com,"Concordia University, Montreal, Concordia University",2,axelbogos,,,bogosaxel@gmail.com,alecadub,Alec,Adub,adub.alec@gmail.com,,,,,,,,
Second Oath,https://bostonhacks-f2018.devpost.com/submissions/105784-second-oath,"Inspiration

We were inspired by recently published research from Veterans Affairs Canada on the effectiveness of a self-assessment checklist for helping veterans identify potential personal problems in military-civilian transition. The outcome of the research seems perfect for a digital medium, and we believe this application could help a lot of people. (Research can be found here: http://www.veterans.gc.ca/eng/about-us/research-directorate/publications/reports/self-assessment-civilian-life)

What it does

The web app onboards the twelve question checklist and allows the veteran or serving member to answer them in a user-friendly way. They are then presented with an overview of the results, as well as an interactive map showing nearby resources according to their unique responses.

How we built it

We started by discussing, at length, the user experience of the app. We wanted to build the platform around the checklist to maintain the integrity of the research. Once we agreed on our end product and mission statement, the team split into areas of speciality. Ethan focused on getting the backend and server functioning, Michael researched to aggregate resource data and fit that data into an appropriate model, and Alex designed the user flow and user interface in HTML/CSS.

Challenges we ran into

There were many challenges in this project. Alex was working on front-end styling, which goes beyond her usual focus of UX and UI prototyping alone. Despite it being a hackathon project, Ethan was determined to maintain polish and professionalism in the build. He learned to master Node.js the right way. Meanwhile, Michael was facing the challenge of constructing a data structure and effective data filtering system to match the user experience we had set out to develop.

An interesting challenge was collecting all of the support services resource data together. It proved to us that this is an existing problem, which an app like this would solve.

Accomplishments that I’m proud of

We’re very proud of the end polish of the app, given the time and technical constraints, and the fact that we all met and formed a small team at the hack. Getting the Google Maps API functioning to the point where our custom-built resource database was displaying nearby was a major accomplishment.

What we learned

How to master Node.js and how to effectively create a data structure that fits with a pre-existing user experience and system design.

What’s next for Second Oath

We envision this app growing. The database would be continuously developed to cover more locations. In the future, a major improvement would be to collect satisfaction data from users and use machine learning to actually improve the checklist over time. This would doubly help connect more service providers to people who need them, while supplying Veterans Affairs and the government with useful administrative metadata tracking.

We truly believed that initiating that small point of problem realization in a veteran can cause a cascade of healthy growth.
",,https://github.com/CobaltM/BostonHacks,,"Best use of Google Cloud Platform, [TRACK] Giving Back to Veterans Prize","html, javascript, css, node.js, mongodb, adobe-illustrator, photoshop","Georgia State University, Sheridan College, Duke University",Google Cloud Platform,,scaldwell9,Samuel,Caldwell,scaldwell9@student.gsu.edu,"Georgia State University, Sheridan College",2,AlexandraThompson,Alexandra,Thompson,alelthompson@gmail.com,MichaelGallipo,Michael,Gallipo,michael.gallipo@gmail.com,,,,,,,,
BigBrotherUrbanPlanningProject,https://bostonhacks-f2018.devpost.com/submissions/105805-bigbrotherurbanplanningproject,"DATA FOR URBAN HACK

BIG BROTHER URBAN PLANNING PROJECT

https://github.com/felmoreno1726/BigBrotherUrbanPlanningProject 

CHALLENGE: IDENTIFY STREET INFRASTRUCTURE


 Our team targets the problem of generating a database for that contains the infrastructure along the streets.
 This will hopefully generate a data frame that can help StreetCaster program in Boston.
 Providing a data set on the location of the infrastructure and what it is.


APPROACH


 The coordinate of the beginning and the end of the street is provided by the user.
 The framework will interpolate between the provided geo-coordinates. In order to ensure that the generated points will lie on the road, the Google Maps API will be utilized.
 For each of the new coordinate, images of the street will be obtained via Google Street View API. At each point, a set of four photos is fetched to ensure a 360-degree field-of-view.
 The photos will be uploaded and processed on Google Cloud Vision API to identify the objects inside each image.

",,https://github.com/felmoreno1726/BigBrotherUrbanPlanningProject,,[TRACK] Data for Urban Good Prize,python,"Boston University, MIT, Montreal University",,,quang-ha,Quang,Ha,qth20@bu.edu,"Boston University, Concordia University, Montreal, Chandigarh University, Massachusetts Institute of Technology",3,RahulMalhotra,Rahul,Malhotra,electronicsgrad@gmail.com,felmoreno1726,Felipe Ignacio Moreno,Santana,felipemoreno1626@gmail.com,gautamvignesh,Gautam,Gowrishankar,gautamvignesh@gmail.com,,,,
Git Mess,https://bostonhacks-f2018.devpost.com/submissions/105886-git-mess,"Inspiration

We all know people that are really great at using a computer- if the computer is from the 80's and doesn't have a GUI. However, it is important to introduce these people to such new technologies as SMS and even image messaging. What better tool to introduce them to instant messaging than version control software that they already use?

What it does

This program lets you send and receive SMS and MMS messages using git. You can create a file with the phone number and enter one line per message. When you commit and push, any new messages are then sent to their respective phones. People can reply to the messages and you git pull to check for new messages.

How I built it

There are two main components:


There is a hook in the server's git repository that checks for any new messages whenever someone pushes to it. It then sends the messages with the Twilio API.
There is a webserver built in Flask that listens for new SMS/MMS messages and commits them to the git repository as they come in.


Challenges I ran into

Many of the libraries for using git in python have incomplete documentation when it comes to finding the exact changes in a diff.

Accomplishments that I'm proud of

Making a pretty good ASCII Art generator in the process.

What I learned

How to create git hooks and host a git server.

What's next for Git Mess

Additional integrations with WhatsApp, FB Messenger, etc.
",,https://github.com/dmelcer9/git-sms,,Twilio — Best use of Twilio API,"python, git, twilio, git-hooks, flask, gitpython",Northeastern University,,,dmelcer9,Daniel,Melcer,dmelcer9@gmail.com,Northeastern University,0,,,,,,,,,,,,,,,,
Eddie,https://bostonhacks-f2018.devpost.com/submissions/105896-eddie,"Inspiration

Smart home technology has been largely popularized by Amazon, Google, Microsoft, IBM, and others. However, we saw that there was little infrastructure in place for users who are deaf or hard of hearing. To increase the accessibility of smart home technology, we set out to create Eddie, named after Thomas Edison, the famous inventor who was also hard of hearing.

What it does

To use Eddie, the user motions towards a motion sensor with their hand one of the built in gestures that corresponds to a command. For example, the screen touch command (pointing horizontally forwards) corresponds with the command to get the weather. Then, Eddie gives the output in the form of a computer screen with large text.

How we built it

Eddie was made with JavaScript, HTML, and CSS, and utilizes the LEAP motion sensor. The APIs we used to complete the tasks that we programmed Eddie to take (return the weather, a random dog GIF, and a recent news headline) were the Open Weather Map, Giphy, and News APIs. Using the LEAP motion sensor, Eddie was able to distinguish between hand motions and, with the use of the various APIs, complete tasks given to it by the user.

Challenges we ran into

When we set out to build Eddie, we planned on writing mainly in Python. However, we found that the LEAP motion sensor's python could did not run on our computers. Luckily, we were able to work with the LEAP motion sensor in JavaScript and HTML. However, in one of our original ideas for Eddie, Eddie gave a text message output to the user that could be seen on a fitbit or smart wearable device. Using JavaScript proved to be a problem because we could not use the Twilio API with the amount of time given. So, we decided to display Eddie's output on a computer screen. 

Accomplishments that we're proud of

We are proud of our group's ability to start out with a plan and be able to accommodate problems with the original idea as we went along, like changing from a text message output to a display on a computer screen. Overall, we are very proud of what we have accomplished at BostonHacks (for all of us, this was our first hackathon!).

What we learned

We learned how to work and create a project outside of our comfort zone, working with APIs we had never worked with before and the LEAP motion sensor, and be able to help make technology more accessible.

What's next for Eddie

There is a lot of room for growth for Eddie. In its ideal form, it could sense the hand movements from the user from farther distances anywhere in the room, rather than be limited to the relatively small radius from the LEAP motion sensor. In addition, Eddie in the future would have text message output capabilities.
",,,https://s3.amazonaws.com/challengepost/zip_files/production/37921/zip_files/Eddie.zip,"Spark! Fellowship Award, Best use of GIPHY API, [Weekly Challenge] Best Social Good Hack from Fidelity, [TRACK] The Smart Home prize","open-weather-map, news-api, giphy, leap-motion, javascript, html",Boston University,,Leap Motion,lindaluo,Linda,Luo,lindaluo@bu.edu,Boston University,2,lukasrosario,Lukas,,lukasrosario52699@gmail.com,chanben,Benjamin,Chan,chanben@bu.edu,,,,,,,,
Streamlining & Enhancing Boston's StreetCaster Program,https://bostonhacks-f2018.devpost.com/submissions/105899-streamlining-enhancing-boston-s-streetcaster-program,"Inspiration

In 2014, City of Boston Public Works Department employees walked 1,600 miles to collect data on the quality of sidewalks in Boston. The process was time- and energy-intensive but contributed to the important realization that the current system of fixing sidewalks, which is prioritized based on 311 calls that citizens make themselves, has led to wealthy neighborhoods having sidewalks in much better condition than poorer neighborhoods. Our team worked on the development of an algorithm and app that would aid the City of Boston not only collect information on the state of sidewalks in Boston more efficiently but also equalize infrastructure accessibility and empower individuals to support the city's infrastructure programs. 

What it does

The first part of our project is an algorithm that scans images from GoogleMaps and determines the state of a sidewalk based on five categories: in good condition, showing cracks/evidence of deterioration, being dirtied/graffitied, being intruded on by tree roots, or experiencing inhibiting overgrowth. We also taught the algorithm to differentiate between five different attributes: construction, lamp posts, solar trash cans, trash bags, and trash cans. We then fed the algorithm 1,000 of the first 311-call pictures related to sidewalks which created an HTML file showing every picture that had at least a 50% chance of having at least one of the five sidewalk quality categories in it. Each category has a percentage attached to it that represents the probability that that category is shown in the image. The 50% parameter ensures that GoogleMaps images with people in them or taken inside are not included in this HTML file. The City of Boston can now use our algorithm to scan GoogleMaps images on a yearly basis (or every time Google updates GoogleMaps) to determine which sidewalks require the most urgent repair by comparing the percentages and prioritizing ""cracked,"" ""overgrowth,"" or tree ""root"" sidewalks over ""dirty"" or in ""good"" condition sidewalks. 

The second part of our project is an app whose mission is to engage citizens in the process of maintaining neighborhood infrastructure. While the City of Boston currently has an app with a similar purpose, called ""BOS: 311"" (link), we believe our app is the logical next step in technological advancement because it incorporates our newly designed algorithm as well. By having the app scan the photo in real-time for the user to see the breakdown of the sidewalk's quality, the user not only becomes more informed about when the sidewalk will most likely be fixed but also can determine whether their complaint is as urgent as it seems in relation to the other infrastructure issues being reported. The purpose of these features is two-fold: citizens in poorer neighborhoods will feel more comfortable reporting issues if they know that the repairs will be addressed in a timely manner, while citizens in wealthier neighborhoods can see whether or not what they're reporting is a truly urgent matter. We developed these features after hearing that the current issue with 311 calls is that wealthier areas are reporting less urgent repairs more often than poorer areas are reporting more urgent repairs. 

We believe that the City of Boston's combined use of our algorithm with GoogleMaps and our app will greatly expedite the sidewalk quality evaluation process while maintaining citizens' abilities to get involved with the city's infrastructure development. 

How we built it

To create our algorithm, we used Microsoft's computer vision model Custom Vision and trained the program to recognize the five categories of sidewalk quality by manually labeling over 400 images. We then wrote a python script to create the HTML file. Lastly, we used Android Studios and Java to create our app's user interface. 

Challenges we ran into

One of our biggest challenges was training the Custom Vision model to recognize photos on the scale of GoogleMaps images. For example, our algorithm works very well with the scope of an image taken by a user for a 311 call. However, for a street-view image, the algorithm often cannot detect between the street and the sidewalk, so if the street is in good condition but the sidewalk is not, the probability percentages are not quite as accurate since they're taking into account the conditions of the street and the sidewalk. 

Our second major challenge was the backend design of the app. We wanted to be able to create a demo app that could take the coordinates of the user's photo, place the image in the GoogleMaps coordinate range, feed it to our algorithm, and then produce the probability percentages in the same way it does for our HTML file. However, in the time allotted, we found that task to be a bit too difficult. 

Accomplishments that we're proud of

Seeing as this is our first hackathon for the majority of our team members, we were very proud of our ability to produce a functioning product, despite our algorithm's flaws and app's limited interface. We are also very happy that we were able to incorporate a ""social good"" aspect to our project that we hope will inspire the team behind StreetCaster to continue promoting greater infrastructure equality in Boston and beyond. 

What we learned

We certainly learned a lot about the basics of machine learning by teaching a computer to recognize certain objects in images! Using Google Maps, we were able to download the images of the sidewalks from 2014, run our model on these images and compare that data to the one obtained manually by the Boston engineers. We also learned how to use Java to create an Android app interface and python script to output an HTML file.  

What's next for Streamlining & Enhancing Boston's StreetCaster Program

Sleep! After that, we'd love to keep thinking about how we can continue to increase infrastructure accessibility and equality through future projects. 
",https://youtu.be/CgHO9q7JedA,http://www.abilarsh.com/BostonHacks,https://s3.amazonaws.com/challengepost/zip_files/production/37925/zip_files/BostonHacks2018PPT.zip,"[Weekly Challenge] Best Social Good Hack from Fidelity, [TRACK] Data for Urban Good Prize","html, android-studio, java, python, custom-vision, powerpoint, google-streetview, esri","McGill University, McMaster University, Northeastern University",,,balletviolin15,Emily,Chen,balletviolin15@gmail.com,"McGill University, McMaster University, Northeastern University",3,abilarsh_viji,Abilarsh,Viji,vabilarsh@hotmail.ca,tatyanapak,Tatyana,Pak,tatyana.pak@mail.mcgill.ca,DrLaymen,Jing,Chen,jchenuni@gmail.com,,,,
BostonCracks,https://bostonhacks-f2018.devpost.com/submissions/105900-bostoncracks,"BostonCracks

This project focused on: 

Challenge 1: Match Boston’s Ground Truth Sidewalk Data

Use Google Maps to try to replicate our sidewalk condition findings from 2014, to see if using this way is a viable option in the future.

Sidewalk Segmentation

If we want to be able to use Google Maps in order to replicate the city's 2014 findings we must be able to separate the sidewalk from any other aspects of a city scene. When using google street view this problem of separation becomes one very similar to the semantic image segmentation problem that self-driving cars face. With this realization, we decided to use a pre-trained DeepLabV3 model to help us solve this problem. This pre-trained model fits directly with this problem as it was trained on the Cityscapes Dataset which translates very well to the urban environment of Boston.

What DeepLabV3 allows us to do is to take an image from google maps and get rid of everything but the sidewalk. For example:

We first provide an image from google maps:


Then the DeepLabV3 model segments the image:


Finally, we apply one last image pre-processing step and crop out everything but the sidewalk:


Now we can feed these isolated sidewalks into a classifier to determine if the sidewalk needs repairs!

Sidewalk Damage Classification/Scoring

The dataset

The possibility of finding a dataset containing damage scores for semantically segmented sidewalk was never even close to probable. Because of this, we were forced to make our own dataset, but because of Boston's StreetCaster project, we weren't running around blind. By extracting the latitude and longitude from the StreetCaster dataset we knew where to look for damaged sidewalks in Google Maps, and just about how damaged they should be. With this approach, we were successful in creating a small dataset (albeit tiny for ML) of labeled semantically segmented sidewalks. 

The architecture and transfer learning

At the center of any meaningful machine learning model is the data, but once the data is collected we need an architecture to best utilize such data. We decided to choose ResNet18 as our model. Because we were limited by both time and amount of data we opted to use a pre-trained ResNet18 model and transfer its already learned features to this task of sidewalk damage scoring. This process, known as transfer learning allows us, in a sense, to teach a model that already knows how to see to simply make meaning of the things it detects in our dataset's images.

The results

After training for 100 epochs (iterations over the dataset) we saw the model successfully learn. However, it is questionable if the model was actually picking up on relevant features as the dataset the model was trained on is, as previously mentioned, tiny for an ML task. We do believe that our results lead to the conclusion that this is a worthwhile approach given additional time and resources.

The loss:


Challenges we faced/where this could be improved

The lack of a sizeable dataset is the greatest pressure point of this project. We originally wanted to programmatically pull Google Maps images from their API, but after looking into this option and finding out that the size and quality of the images return would not work well with both the segmentation and scoring model we decided our best option would be to manually create the dataset. We do believe that with more it is very possible to automate the dataset creation - at least partially (labeling may be tricky).

Model Design in Summary:

",,https://github.com/samc24/BostonCracks,,[TRACK] Data for Urban Good Prize,"pytorch, python, machine-learning, deeplabv3, keras, cnns, google-maps",Boston University,,,ddehueck,Devin,de Hueck,d.dehueck@gmail.com,Boston University,2,samc24,samc24,,sam.chaturvedi24@gmail.com,darcym,Darcy,Meyer,darcym@bu.edu,,,,,,,,
Markdown Downloader,https://bostonhacks-f2018.devpost.com/submissions/105909-markdown-downloader,"Inspiration

What it does

A simple page that allows to write notes in markdown on one side of the screen and see an HTML preview of those notes on the other side of the screen. 

How I built it

Setup Webpack and React on my own (no create-react-app or other tools). Used the webpack-dev-server to develop codebase without Express.

Challenges I ran into

Accomplishments that I'm proud of

Finished the project by myself and my teammate Yuting. And I learned a lot during exploring web programming

What I learned

NodeJs and React

What's next for nodeJSmarkdown

hold this small project actually on the cloud.
",,https://github.com/ShirleyLii/Markdown,https://s3.amazonaws.com/challengepost/zip_files/production/37929/zip_files/markdown.zip,,"node.js, react, css3, html5, webpack","Michigan State University, Stevens Institute of Technology",,,liyingfe,Yingfei,Li,liyingfe@msu.edu,Michigan State University,0,,,,,,,,,,,,,,,,
GIFS Against Humanity,https://bostonhacks-f2018.devpost.com/submissions/105948-gifs-against-humanity,"Inspiration

We wanted to be creative with Giphy's API. We're also big fans of board games, and strongly got influenced by Cards Against Humanity :).

What it does

GIFS Against Humanity is a multiplayer web game that can be played in a browser.
Users can create or join a game room.
The game works like cards against humanity except that players are given a set of random gifs and each player chooses a gif to compliment the given card. The judge then decides which card was the funniest, or chooses a winner.

How we built it

We've built it using React on the frontend and Python on the backend.

Challenges we ran into

Getting the frontend to connect with the backend and some UI styling. Getting api endpoints to behave how we wanted them to.

Accomplishments that we're proud of

We're proud of crossing borders to participate in this hackathon with no sleep, especially our boy Chris who battled through the night, and got our app ready.

What we learned

We learned how web sockets worked in order for multiple users to communicate to the server and get real-time updates of the server.

What's next for GIFS Against Humanity

Many cleanup, prettify-ing and optimization. ;) Add some voice coms!
",,https://github.com/niiita/CardsAgainstGifs,,Best use of GIPHY API,"react, python, websockets, flask",Concordia University,,,Keverdose,Kevin,Ye,yekevin1995@hotmail.com,"Concordia University, Montreal",3,woozzie,Chris,Woo,chriskfwoo@gmail.com,mari3mmi,Amarisse,Brito-Martins,amarissemarie23@gmail.com,niiita,niiita,,nitachaska@gmail.com,,,,
UniCamp,https://bostonhacks-f2018.devpost.com/submissions/105949-unicamp,"Inspiration

The app is inspired by Yelp and the beautiful camping sites in Canada.

What it does

It allows users to create & post camping site name, location, and descriptions.

How I built it

I used JavaScript and Node.js paired with bootstrap. The backend database is done with mongoose ODM.

Challenges I ran into

Try to use EJS/Bootstrap to replace HTML/CSS, learn from scratch.

Accomplishments that I'm proud of

Able to accomplish the main functionalities and bearable looking front-end.

What I learned

Using front-end library saves so much time in development.

What's next for UniCamp

Add in comments on each campsite and enable the user authentications.
",,,https://s3.amazonaws.com/challengepost/zip_files/production/37946/zip_files/unicamp.zip,,"node.js, javascript, ejs, express.js, html5, css3, bootstrap, mongodb, mongoose",University of Toronto,,,bruce311,brucehou,,brucehou311@gmail.com,University of Toronto,0,,,,,,,,,,,,,,,,
/map Google Maps Integrations,https://bostonhacks-f2018.devpost.com/submissions/105965-map-google-maps-integrations,"Inspiration

If anyone uses Notion.so, they know it's great - you can add pretty much any type of block you want - creating your own personal dashboard, or an all-in-one space for their team. However, their Google Maps integrations are limited. Currently, you can embed a map that's centred around one place, but not much else. As someone who enjoys planning their trips (such as this one to Boston), I wanted to see more ways Google Maps can be used in the app. 

What it does

These new integrations allow you to get directions and put them into a Notion page without navigating away. The feature would pull the place names entered within the block with a /map command and provide directions as well as the map associated with it to the page. Another feature is the ability to embed maps from your Google account's My Maps. By authenticating with the email address you have with Notion, it can pull your saved locations into the Notion Page.

How I built it

This is only a prototype/proof of concept as Notion does not provide an API to let you develop for it (which is understandable due to the maturity of the product), but if I were to build it, I would use the Google Maps directions API, as well as the Google Cloud Platform authentication permissions to connect Google Maps with Notion. 

Challenges I ran into

Everything

Accomplishments that I'm proud of

Going to Quincy Market and getting Clam Chowder

What's next for /map Google Maps Integrations

If Notion provides the ability for users to develop integrations into their current app, this would be a key one to tackle. It would also be very smart for Notion to do this since there has been SO many feature requests as their user base grows. 
",,https://www.notion.so/queeniwu/Notion-Google-Maps-Integration-ba040d5a4a394398aa0aaf6129befcb2,,Best use of Google Cloud Platform,"google-cloud, javascript",University of Waterloo,Google Cloud Platform,,queeniwu,Queenie (Shuang),Wu,queeniwu2017@gmail.com,University of Waterloo,0,,,,,,,,,,,,,,,,
RiderFly,https://bostonhacks-f2018.devpost.com/submissions/105966-riderfly,"Inspiration

With raise of P2P economy, we think it should not be limited to the vehicle services or food delivery. It should also cover the small things to make everyday life easier.

What it does


Connect customers and riders in a simple fashion
Allow customers to shop groceries
Arrange riders for order delivery


How we built it

We have two components, one for customer interface which allows customers to sign up via Google OAuth2, view stores, place orders, and view orders. The customer component is based on Python Django and Bootstrap4 framework with HTML5 + JavaScript + CSS3 *.
The other is for rider interface which allows riders to sign up via *Google OAuth2, view orders assigned to them and deliver the orders. The rider component uses Go as backend with HTML5 + JavaScript + CSS3, and designed specifically for mobile devices for easy access. Riders also need to verify their phone numbers via Twilio Verify at registration.

Both customer and rider components are deployed on Google Cloud Compute Engine and connected to Google Cloud SQL (MySQL 5.7) as database to store data persistently and safely. We use Caddy Web Server as an alternative to Nginx which supports automatic HTTPS via Let's Encrypt, thus we have all-site HTTPS support!

In addition, we use Twilio SMS APIs as a means of notification for both customer and rider. In consideration of privacy, we also support anonymous text communication, where customers and riders can communicate about their orders with text messages by directly replying to our number without knowing the real phone numbers of each other.

Challenges we ran into

We met and overcame many challenges, but we specifically had hard times of following two main challenges:


Correctly apply API credentials and make request data in the correct form of Twilio APIs. It turns out the API secret token must be carried with each request with a designated header, and in different methods (GET, POST, etc) of requests, Twilio APIs require different forms to pass parameters. For GET requests, we need to encode parameters in the URL query. For POST requests, we need to encode parameters as a POST form (we thought was JSON as POST body)
Correctly setting the redirect URI for Google OAuth2 for our Django backend. It kept using ""localhost"" as redirect URI and no user option is given for our customer domain. We did a lot of research and it turns out our reverse proxy setting was not prefect, we have to pass ""HOST"" (the actual domain name, riderfly.life in our case) to the Django backend from the reverse proxy.


Accomplishments that we're proud of

We built a complex system involves many APIs and runs on real production infrastructure and services, also have great cooperation between two components written in completely two different languages and frameworks.

What we learned

We really learned a lot during this Hackathon, here are some notable points we would like share:


How to perform teamwork from discussion, design to development and deployment.
How to solve hard problems both individually and collaboratively. 
How to deploy and manage applications in production infrastructure.
How to work with third-party APIs (especially Twilio) and smoothly integrate them into our applications.


What's next for RiderFly


More fair algorithm for assigning orders to riders
Build a mobile app to provide more smooth and native experience
Support more forms of payment
Support scheduled delivery time for convenience

",,https://riderfly.life,https://s3.amazonaws.com/challengepost/zip_files/production/38018/zip_files/Project_Wireframes.pdf,"Best use of Google Cloud Platform, Twilio — Best use of Twilio API, Best Domain Name from Domain.com","go, python, twilio, django, javascript, css, jquery, bootstrap, spectre, google-cloud, google-cloud-sql, twilio-verify, https, json, scrapy",Boston University,,,Unknwon,Jiahua,Chen,u@gogs.io,Boston University,4,TianrenLi,Tianren,Li,tli92@bu.edu,JunweiZhou,Junwei (Antony),Zhou,junwei23@bu.edu,caik20,Kunlin,Cai,caik20@bu.edu,jingyu98,Jing,Yu,jingyu98@bu.edu
Coffee-Bot,https://bostonhacks-f2018.devpost.com/submissions/105975-coffee-bot,"Coffee-Bot

Inspiration

We're a group of engineers. We like coffee, that's practically a given. We also hate waking up. So, we decided to build something which would wake us up, make us coffee, and utilize some nifty technologies!

Technologies

Ruby on Rails,
Python,
C++,
Twilio API,
Bose SoundTouch API,
Qualcomm 410C Dragonboard,
Arduino Nano,
Mr. Coffee Advanced Brew,
A whole bunch of wires & servos :)

What does our project do?

Our project enables a user to have a new type of alarm clock, one that provides much more utility than the traditional kind. The user can either use our web-app to configure their new alarm clock, or, they can simply send a few text messages from their phone to achieve the same goal! After properly configuring their client devices, a user can simply set an alarm, and then never have to lift another finger. 15 minutes before their alarm is triggered, the backend will send a request to our custom built client prototyped with a Qualcomm 410C Dragonboard to trigger their coffee machine to make a pot of their desired brew of coffee (strong, or regular). When their alarm goes off, it will send a request via the Bose SoundTouch API to play music (any mp3 file!) on the user's Bose speaker, and will use the Twilio API to call their cell-phone, so they're sure to wake up! By the time they get out of bed, they'll have a fresh pot of coffee waiting for consumption, mmm...
",,https://github.com/ForTheYin/coffee-bot,,"Best IoT Hack Using a Qualcomm Device, Bose - Most creative use of Bose SoundTouch Speaker API, [TRACK] The Smart Home prize, Twilio — Best use of Twilio API","ruby-on-rails, python, c++, bose-soundtouch, arduino, qualcomm","Boston University, University of Waterloo, Worcester Polytechnic Institute",,DragonBoard 410C,avatarneil,Charles Neil,Goldader,avatarneil@gmail.com,"Boston University, University of Waterloo, Worcester Polytechnic Institute",2,ForTheYin,Andy,Yin,fortheyin@gmail.com,kandonie,kandonie,,kandonie@wpi.edu,,,,,,,,
Cordelia,https://bostonhacks-f2018.devpost.com/submissions/105984-cordelia,"Inspiration

While driving in a new city, you realize that you have arrived at your destination and all the available parking spaces have been taken. You have used up your data for the month and as you pull over, you realize that you can text Cordelia, an SMS-based chat-bot, for nearby parking spaces.

Meet Cordelia

Cordelia is an SMS-based chat-bot who helps users find parking spaces close to their destination. Users can text Cordelia to initiate a conversation, and after Cordelia asks them a few questions about their preferences and destination, she will offer them a few options for parking.

How we built it

Cordelia launches when you reach out to her through text message. Given the desired destination. Cordelia then consults the Here API to find the exact geographical coordinates of the destination, which it then passes onto the Shine API that searches for parking options near that destination. Then, it displays these options to you, allowing you to select your preferred parking spot. When you select your parking spot of choice, Cordelia once again consults the Here API to find and select the optimal route to your desired parking space, which it then passes onto you. All this is done entirely through SMS with the aid of the Twilio API - no internet access necessary.

Challenges we ran into

It was difficult to find an appropriate method to implement the chatbot. I explored Botkit and Twilio to figure out which would best suit our needs.


Kathleen


A challenge that I didn't see coming was working out async stuff in Node.js - once when integrating Here and Shine APIs, and once again when integrating that with the Twilio API / chatbot. 


Jennifer 


One of my biggest challenges was finding a way to integrate all of the different API's we had planned to use; originally Botkit, Google Maps, and Shine. The solution we found was to use Here and Twilio as our map and chatbot as they are already well integrated.


Fatimah


Accomplishments that we're proud of

Because of the many technologies we mashed together, we were pretty much forced to use Node.js because it was the only one compatible between all the APIs we used. We're proud of how we were able to work with this despite none of us have much experience with it!

Our team is proud of the fact that we were able to work under pressure and tight timelines to meet this deadline. Our ability to debug and continuously refactor our solution meant pushing our ability to collaborate, problem-solve and self-assess looking for areas of improvement. 

What we learned

Our team learned how to use the APIs for Twilio, Shine and Here in a short period of time. Our team members who had never used node.js before had the opportunity to learn by building, this challenge really helped us learn to self-teach and seek information in different ways. Our team was also able to learn how to manage our time and delegate tasks in order to have everything done in time for submission.

What's next for Cordelia

Our team found some improvements that could be made to Cordelia that we are looking forward to continuing working on after BostonHacks.

One improvement our team found was giving Cordelia the ability to differentiate between parking spots that are empty and already taken, only suggesting available parking spots to users. This could be implemented using a ParkWhiz API which tracks whether parking spaces are available of not through heat maps. Another way that Cordelia could receive information about whether parking spots are available or not is through crowdsourcing, users could be given the option to let Cordelia know if they arrived at a parking spot that was already taken, or which parking spot they took, Cordelia could then register these locations as temporarily unavailable.

Cordelia’s user experience could also be improved, with a faster response time and responses more tailored to each user. This could be done through the use of tailored user accounts, where users could log in through a web portal and change the interactions they have with Cordelia while looking for a spot. Cordelia can recognize when these users reach out to her and generate her interactions accordingly. We want to improve the UI of Cordelia, which we didn't have time for during the hackathon. 

Our final suggestion for ways that we could build onto Cordelia would be to add a notice at the beginning of every user’s interaction reminding them that texting while driving in the State of Massachusetts is illegal. Users are encouraged to use Cordelia before they leave for their destination, and in the worst case, pull over in order to use Cordelia therefore adding another warning with Cordelia would encourage safe driving behaviour.

Built With

Twilio API, express, Here.com API, Shine API, Node.js, JavaScript
",,https://github.com/amorphouspanda/bostonhacks,https://s3.amazonaws.com/challengepost/zip_files/production/37995/zip_files/bostonhacks-master_%281%29.zip,"Best use of HERE.com, Liberty Mutual  - Best Hack to Live Safe, Twilio — Best use of Twilio API","javascript, twilio, shine, node.js, here",University of Waterloo,HERE.com,,FatimahAreola,Fatimah,Areola,fatimahyinka@gmail.com,University of Waterloo,2,jenniferyhwu,Jennifer,Wu,jenniferyhwu@gmail.com,kitkat222,kitkat222,,liangkathleen@gmail.com,,,,,,,,
Aura,https://bostonhacks-f2018.devpost.com/submissions/106005-aura,"Inspiration

Help make social media more accessible to people with disabilities.

What it does

Detect gifs that can be detrimental to people suffering from epilepsy.

How we built it

The frontend was built with javascript and html, while the backend was built using flask written in python. The image processing was done in the backend.

Challenges we ran into

Being able to compare the different frames that make up a gif.

Accomplishments that we're proud of

Writing an innovative algorithm that predicts whether certain gifs are prone to causing seizures among people who suffer from epilepsy.

What we learned

Image processing with python.

What's next for Aura

Improving the algorithm to increase accuracy.
",,https://github.com/RGPosadas/BostonHacks2018.git,,Best use of GIPHY API,"python, neural-net, javascript, giphy, jquery, flask, gunicorne, gif","McGill University, Concordia University",,,mansoorss,Mansoor,Said,mansoor-shah-said@hotmail.com,"Concordia University, Montreal, McGill University",1,KevinFi13,Kevin Ferrandiz,Izquierdo,kevinfi1396@gmail.com,,,,,,,,,,,,
Veteran Success,https://bostonhacks-f2018.devpost.com/submissions/106009-veteran-success,"Inspiration

Zach, a team leader deployed in Afghanistan and now US army veteran, came to speak about the difficulties that many veterans face during the transition from military duty back to civilian life. Brian and I were impacted by Zach's stories and felt compelled to hack a solution and celebrate our Veterans on Veteran's Day, November 11, the day of the hackathon. 

What it does

Veteran Success is a platform that offers resources and guidance to veterans in the core pillars of life: living, finances, career, fun, and love to aid in the transition from military life back to civilian life. 

How we built it

We built a native mobile app using React-Native, using MeteorJS and MongoDB for our REST api and backend. We use Liberty Mutual's Shine API, Gyphy API, Google Cloud Platform, Ticketmaster API, and Seatgeek API

Challenges we ran into

We ran into issues geocoding human readable locations to latitude and longitude.

Accomplishments that we're proud of

We're proud of building a beautiful mobile application with a decoupled backend that aims to serve the veterans of our country. We are also proud of our ability to creatively integrate a number of our sponsor's API's. 

What we learned

We learned that mobile applications are easier to build and beautifully design then we expected. 

What's next for Veteran Success

We didn't get to build out the functionality that we wanted for each of the pillars of life: living, finances, career, fun, and love. Next we will refine the functionality that we have built so far and build for the remaining pillars.
",https://youtu.be/_wmv2P1aoyk,http://veterens4success.org,,"Best use of GIPHY API, [Weekly Challenge] Best Social Good Hack from Fidelity, Liberty Mutual  - Best Hack to Live Safe, Best use of Google Cloud Platform, ITG - Best Fintech Hack, Best Domain Name from Domain.com, [TRACK] Giving Back to Veterans Prize","javascript, react-native, shine-api, google-cloud, gyphy-api",Boston University,"Domain.com,Google Cloud Platform",,julesvs,Jules,Schenkel,julesvs@bu.edu,Boston University,1,brianfakhoury,Brian,Fakhoury,brianfakhoury@gmail.com,,,,,,,,,,,,
BoltAction,https://bostonhacks-f2018.devpost.com/submissions/106016-boltaction,"Inspiration

I lot of people like me are left out from the courts or the fields because of various reasons like skill level, accessibility or even age

What it does

It tells you what game is scheduled in what sport and who is all is going to attend it.

How I built it

Using android studio integrating Firebase realtime, Algolia search, and Twilio's Api

Challenges I ran into

This was my first time working with these kinds of APIs which don't offer data, but a different service, and with experience in user auth, I needed experience with real time database which the firebase offers

Accomplishments that I'm proud of

Getting the APIs and firebase to work with the UI in 24 hours alone.

What I learned

How event management or real time database works, along with some really cool APIs, and searches.

What's next for BoltAction

Completing the app and helping people to go out there and play. It will also help to organize competitions later and would be a great way to bring people together.
",,https://github.com/aryansingh12/BoltAction,,"Best use of Algolia, Twilio — Best use of Twilio API","android-studio, android, java, xml",Umass Amherst,,,aryansingh,Aryan,Singh,aryansingh@umass.edu,University of Massachusetts Amherst,0,,,,,,,,,,,,,,,,
Tiphy,https://bostonhacks-f2018.devpost.com/submissions/106018-tiphy,"Inspiration

Tiphy was inspired by the dating app, Tinder, and cute gifs. We decided to combine the two so that you can rate gifs and find like-minded individuals who share your taste in gifs! 

What it does

Tiphy provides you with the top five cutest gifs based on other's users ratings. It also matches you with another user that you can chat with via e-mail. 

How we built it

We used MongoDB for the databases holding users and gifs. We connected it with node js and jade to produce a functional web application. 

Challenges we ran into

We had never made a website before, so we had to learn everything from scratch. We ran into many difficulties, including the formatting of a database. 

Accomplishments that we're proud of

We made a functioning website! 

What's next for Tiphy

Next is the ability to chat with other users about the GIPHYs, and add in more memes, such as images and text. 
",,,https://s3.amazonaws.com/challengepost/zip_files/production/37988/zip_files/Tiphy.zip,"Best use of GIPHY API, Best Domain Name from Domain.com","giphy-api, node.js, jade, css, mongodb",McGill University,,,heatherboz,heatherboz,,heather.bosiljevac@gmail.com,McGill University,2,hpatel1223,Harsh,Patel,hpatel1223@gmail.com,lvgut,lvgut,,liora@gutim.org,,,,,,,,
DreamCatcher,https://bostonhacks-f2018.devpost.com/submissions/106021-dreamcatcher,"BostonHacks Submission 2018

John Alling and Marissa D'Alonzo

Problem
This hack attempts to solve a problem facing many veterans today- nightmares and insomnia. According to the US 
Department of Veteran's Affairs, up to 1.6 million (8%) veterans experience post-traumatic stress disorder, or PTSD at some point in 
their life. A major symption of PTSD is insomnia and nightmares. In addition, up to 52% of combat veterans suffer from recurring
nightmares. This has major negative effects on motor and mental dexterity, mood, and overall health. 

Solution
Our solution to this problem is Dreamcatcher, an IoT sleep aid designed to help veterans get to sleep and stay asleep. Dreamcatcher
first lulls the user to sleep by guiding them in the traditional yoga breathing techinque of 4-7-8 breathing. Then, it monitors
room temperature and light via sensors on the board, and the user's sweat level and general movement using sensors attached
to their body. If Dreamcatcher senses the user is having a nightmare, it will gently awaken them using gradually increasing, but
relaxing, tones, and then prompt them to complete the 4-7-8 breathing. In addition, it will store and graph the light and 
temperature readings and a ""Sleep Quality Index"", a value between 0-100 ranking the user's quality of sleep. Over time, 
these graphs will reveal the optimal lighting and temperature sleep settings for the user.

Further Work
To extend our solution further, we would first like to export the sensors measuring user informtation to a wearable band using
Bluetooth. We would also acquire more components, including a EKG sensor to measure heartbeat and higher-quality speakers.
We would also like to incorporate a chatbot for the user to speak with about the dream if it was too upsetting to go back to sleep. 
",,https://github.com/dalonzom/BostonHacks,,"Best IoT Hack Using a Qualcomm Device, [Weekly Challenge] Best Social Good Hack from Fidelity, [TRACK] Giving Back to Veterans Prize","python, c++",Northeastern University,,DragonBoard 410C,dalonzom,Marissa,D'Alonzo,dalonzo.m@husky.neu.edu,Northeastern University,0,,,,,,,,,,,,,,,,
Offline Googlemaps Search,https://bostonhacks-f2018.devpost.com/submissions/106023-offline-googlemaps-search,"First, a miserable story

Last spring break my friends and I was driving to Killington Ski Area. After we left the Airbnb apartment we lost internet connection. There was a vehicle navigation system with GPS only, but none of us remembered the address :(

What OGS does

Send your request through text message. You can search the name of the place (e.g. TD Garden), or just make a vague query (gas station around Boston University).

You will get a message with the place address, phone number and opening hours. Now you are able to call for direction or put the address in your GPS navigator!

How I built it

Twilio + Googlemaps API with Node.js framework

What's next for Offline Googlemaps Search

We're trying to attach a snapshot of the map according to the search response. We believe an image provides much useful information for our users.

Text (617) 286-3590 to try it out
",,,,Twilio — Best use of Twilio API,,Boston University,,,LenkaHao,LenkaHao,,jthao@bu.edu,Boston University,1,jerrywxk,Xiankang,Wu,jerrywxk@bu.edu,,,,,,,,,,,,
PALingo,https://bostonhacks-f2018.devpost.com/submissions/106026-palingo,"Inspiration

telephone game

What it does

telephone with different languages

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for PALingo
",,https://github.com/frumsy/palingo-site,https://s3.amazonaws.com/challengepost/zip_files/production/37990/zip_files/palingo-site.zip,,"javascript, html, css",Umass Amherst,,,alezsun,Alex,Sun,alexsun851210@gmail.com,University of Massachusetts Amherst,1,frumsy,Liam,Britt,liambritt3@gmail.com,,,,,,,,,,,,
ParknGo,https://bostonhacks-f2018.devpost.com/submissions/106027-parkngo,"Inspiration

Downtown Boston’s BS parking situation.


Very high public parking prices.
A huge concern for daily commuters.
No existing platform to leverage a free home-owned parking spot, to earn money for the spot when vacant.


What it does

Our web application offers a platform for users to connect with each other and crowdsource parking solutions and provide a cheaper and more convenient alternative to parking. 


Users can either lend parking spots for a user-defined fee, and users can rent available parking spots through the app.
Users in need for a parking spot can filter by location, date range, timings, and prices to match oneself with the desired available parking spot and make a booking through an online transaction.
Lenders can put up their home-owned parking spots up for grab for a desired location and price and earn money


How we built it

Front-end in HTML/CSS/Javascript/jQuery, Here.com/Authorize.net/Google Geocoding API
Back-end in Node.js with a MongoDB database, hosted on mLab

Challenges we ran into

Making the front-end interactive with here.com’s API.
Finding good wifi & sneaking into the Engineering building.
Bringing food over in the cold weather, consequently ordering Blaze Pizza.

Accomplishments that we’re proud of

The entire project; how polished, practical and functional it is.

What we learned

How to use MongoDB

What's next for Park n Go


A user-friendly mobile application deployed on iOS and Android platforms
A review and rating system generated by acquiring reviews by spot renters for each park spot they booked and use, in order to have a competitive and transparent environment for renters and lenders.

",https://www.youtube.com/watch?v=NJTbg9Rk4ks&feature=youtu.be,,,"Best use of HERE.com, Best use of Authorize.net, Spark! Fellowship Award, [Weekly Challenge] Best Social Good Hack from Fidelity, Best use of Google Cloud Platform","html5, css3, javascript, here.com, google-cloud, authorize.net, node.js, mongodb, mlab, jquery, express.js, gcp, google-app-engine",University of Western Ontario; Boston University,"Google Cloud Platform,HERE.com,Authorize.net",,AndyDuLy,Andy,Du Ly,aandy.duly@gmail.com,"University of Western Ontario, Boston University",3,oindrillac,Oindrilla,Chatterjee,oc@bu.edu,leebond,Guanhua,,leebond_guanhua@hotmail.com,amalrkrishna,Amal,Krishna R,amalrkrishna94@gmail.com,,,,
Screenstaver,https://bostonhacks-f2018.devpost.com/submissions/106029-screenstaver,"Inspiration

Fin

What it does

Screen

How I built it

C#

Challenges I ran into

Parsing

Accomplishments that I'm proud of

What I learned

What's next for Screenstaver
",,,https://s3.amazonaws.com/challengepost/zip_files/production/37991/zip_files/post.zip,ITG - Best Fintech Hack,c#,a,,,retvc2c,Warren,/,retvc2c@hotmail.com,Boston University,0,,,,,,,,,,,,,,,,
Muse,https://bostonhacks-f2018.devpost.com/submissions/106030-muse,"Inspiration

Our inspiration for this app was our interest in finding the right music for every mood. We wanted to create a way to always have music to match the mood of your environment as you are roaming your city. 

What it does

Our app curates playlists built to match the mood of a user's location. Locations are grouped into categories, such as shopping for a shopping center, hang-out for a cafe, outdoor for a park, etc. Each of these location categories looks for specific attributes in a song, and add the best ones it can find to its playlist. The app has two modes - search and map. Search allows you to search for a specific location, and map allows you to pick a location off the map to get a playlist. 

How we built it

We built this app in Android Studio, primarily coded in Java and xml. 

Challenges we ran into

One major challenge we ran into was finding a correct distribution of attributes for a song for each category. The attributes of a song that we considered were things such as danceability, energy, tempo, liveness, valence, etc. While it was relatively easy to decide what range of values each location category wanted for each of these attributes (clubs looked for high danceability/energy, libraries would look for low danceability/energy for example), deciding the weights of these attributes was difficult. At first, we were having trouble distinguishing between the desired value of the attribute and how important it was that this attribute was as close to the desired value as possible. Our algorithm was giving us songs that had no place in the category we were testing, such as giving us slow songs for club music. We were finally able to figure out a weighting that worked, and now are successfully able to return mood-matching songs for any of the locations in our database.
Another challenge that we ran into was including the Spotify API. Our goal for this app would be that a user can log into our app using Spotify, and then their mood-matching songs will specifically come from songs or genres the user already enjoys, providing a very personal music experience. We ran into problems incorporating the Spotify API into our project. These problems mainly stemmed from having different things working on different computers at different times, specifically, the computer used to set up the Spotify API was unable to run the app so we had to abandon it for the moment in order to make progress. Our goal is to finish including the Spotify API and allowing the user to sign in and use a larger database of songs. 

Accomplishments that we're proud of

Despite the trouble it gave us, we are really proud of our algorithm for picking songs. Once we figured out the correct weights of attributes, our playlist picker was able to easily pick out the desired number of songs that fit the mood every time. We tested our algorithm with Excel, using the specific values of songs and finding their difference from our desired values. With this tool, we were able to fine-tune our weights based on what the best/worst songs the algorithm was finding. We were also able to figure out an appropriate tolerance, so that even if you don't have enough songs to fill the desired length of the playlist, we will still uphold a certain quality of the music picked for the mood. 

What we learned

Over the course of this hackathon, we learned a lot about data parsing and the importance of having good data. We also learned a lot about Android Studio, and the life cycle of app activities and how to create a life cycle that works with our model functionality. Finally, we learned about incorporating API's into our project, and different ways to use them in order to get the data and functionality we need. 

What's next for Muse

Our end goal for Muse is to have a music streaming service that will add songs to the queue based on your location. This means that if you are roaming through different locations, your music will roam along with you and stay in tune with your surroundings. We hope to continue working on Muse until it reaches this functionallity. As previously stated, we also hope to finish incorporating the Spotify API to have more personal choices for music and recommendations for our playlists. 
",,,https://s3.amazonaws.com/challengepost/zip_files/production/37992/zip_files/PlaylistMaker.zip,[TRACK] Data for Urban Good Prize,"java, android-studio, spotify",Northeastern University,,,grainnecasey,Grainne,Casey,g_r_casey@live.com,Northeastern University,1,MahemaS27,MahemaS27,,mahemafire99@gmail.com,,,,,,,,,,,,
EventBikes,https://bostonhacks-f2018.devpost.com/submissions/106032-eventbikes,"Inspiration

My father was an interesting man; he was born a shoemaker but had such a love for bicycles. But after constant words of discouragement, he abandoned it. Until I revived his dream with this project.

What it does

Well, let me explain. It gives Eventbrite events in Dorchester. Enough said.

How we built it

We built this project on the backbones of the Python web framework Flask, the dynamic web language JavaScript, and HTML/CSS.

Challenges we ran into

""Everything"" - Brandon Chen. This sums it up. We were jumping into this project with lots of ambition and eagerness to use these new technologies in an effort to solve a small problem in a big world.

Accomplishments that we're proud of

I'm very proud that we, at the very least, were able to combine different technologies that seemed infeasible to combine. We got a taste of the good stuff; now we won't stop.

What we learned

Boston Hacks needs more fruit snacks. Flask is trash; React all the way. We need more time to make this ""write.""

What's next for EventBikes

Just like they say it in Spanish: ""Despacito. Ya tu sabes."" Hopefully, we will matured in our skills so that our next endeavor could have some more success.
",,https://github.com/5-Soylents-Later/BostonHacks2018,,,"google-maps, python, flask",Boston University,,,adeshiel,Ashley,Deshields,ashley.deshields.2016@gmail.com,Boston University,3,kevinkbyte,Kevin,Liang,kliang80@bu.edu,Arod15,Andres,Rodriguez,arod1198@gmail.com,NaginiChen,Brandon,Chen,naginichen@gmail.com,,,,
GFood,https://bostonhacks-f2018.devpost.com/submissions/106033-gfood,"Inspiration

What it does

Display a list of pictures from the search index of Clarifai based on the search result sent by the user. Dislike the picture for a new one to appear. Like it to receive a text using Twilio API to get the location and name of the restaurant on your phone. Information retrieved by going through Algolia API before sending it to the user.

How we built it

We use Asp.net web api project to connect with our react project. We planned where to use the API and how to connect those components together. Afterwards, we started to code while following our planning and changing along the way when unexpected constraints or requirements appeared.

Challenges we ran into

Using multiple API's together. Finding a good idea was hard and following our initial plan was hard since there were multiple constraints regarding the API or about the architecture that appeared at unfortunate time which forced us to change our plan accordingly.

Accomplishments that we're proud of

Having used multiple API's together and making it work. Planning a whole project and finishing it within 24h.

What we learned

We learnt about how to use multiple API's. Working in team for a long period of time to achieve our goal.

What's next for GFood

Mobile version, Location based, adding bigger dataset, creating profile for likes,
",,https://github.com/TangMichael/GFood-BostonHacks,https://s3.amazonaws.com/challengepost/zip_files/production/38003/zip_files/GFood-BostonHacks-master_%281%29.zip,"[Weekly Challenge] Best use of Clarifai’s API, Best use of Algolia, Twilio — Best use of Twilio API","c#, react, algolia, clarifai, twilio, yelp",Concordia University,"Algolia,Clarifai",,TangMichael,Michael,Tang,tangmichael6@hotmail.com,"Concordia University, Montreal, Concordia University",3,eyitsKevin,eyitsKevin,,kevinateur@hotmail.com,Zhen-Yee,Zhen-Yee,,davster2@gmail.com,phistanx,Tristan,,phistan007@gmail.com,,,,
PiggyHack,https://bostonhacks-f2018.devpost.com/submissions/106037-piggyhack,"PiggyHack (aka FeetShare)

This app aims to be the Uber for piggy back rides, allowing people to request
piggy back rides to and from places. This app will revolutionalize the way
people think about transportation. Via this app, those without the ability
to run their cars in the ground for extra cash can now even use their bodies
to not only whip themselves into shape, but also be able to earn extra money
in their free time piggy backing people around the world!


Using React Native, we built a web app from the ground up
We integrated the Giphy, Twilio, and Google Maps APIs into our program


We used Giphy to produce GIFs related to piggy-back riding
We used Twilio to notify people when their ride is arriving
We used Google Maps to show people where they are



So don't get carried away, but it's no pig deal. It won't break your piggy bank ;)
",,https://github.com/NEUDitao/PiggyHack,,"Best use of GIPHY API, Best use of Google Cloud Platform, Twilio — Best use of Twilio API","javascript, racket, react-native, giphy-api, twilio, google-cloud",Northeastern University,,,NEUDitao,Edward,Li,edward.d.li@gmail.com,Northeastern University,2,sarah-witt,Sarah,Witt,witt.s@husky.neu.edu,TalUsvyatsky,TalUsvyatsky,,tal.usvyatsky@gmail.com,,,,,,,,
Dem Smart,https://bostonhacks-f2018.devpost.com/submissions/106040-dem-smart,"Inspiration

The inspiration for this project came from personal experiences. One of our members had a family member suffering from Alzheimer's and understands personally the traumatizing effects it has on a family.

What it does

It is a virtual reminder system which provides a personalized experience. We provide a personalized experience for the user by having voices of their loved ones. It has been proven that familial voices help dementia patients maintain communication with their family. It slows the aging process of dementia.

How we built it

We built it using the Bose SoundTouch Audio Notification API and Google Calendar API. We built the website using HTML and CSS.

Challenges we ran into

Figuring out how to implement multiple APIs and make them work together.

Accomplishments that we're proud of

We were able to successfully connect all components of our utility together.

What we learned

We learned about Bose SoundTouch Audio Notification API and more about the Google API.

What's next for Dem Smart

We are taking over the neuroscience industry.
",,https://github.com/adityadutta/BostonHacksFall18,https://s3.amazonaws.com/challengepost/zip_files/production/37996/zip_files/BostonHacksFall18-master.zip,"Bose - Most creative use of Bose SoundTouch Speaker API, Liberty Mutual  - Best Hack to Live Safe","html, python, css","York University, Brown University, Boston University, Humber College",,,AdityaDutta,Aditya,Dutta,aditya.dutta10@gmail.com,"Humber College Institute of Inforamtion Technology and Advanced Learning, Brown University, York University, Boston University",4,anya_li,Anya,Li,anya_li@brown.edu,RyanGuido,Ryan,Guido,ryanguido29@gmail.com,AndrewLiu312,AndrewLiu12,,liua@bu.edu,rosolomo,Robel,Solomon,rosolomo@bu.edu
BostonHacks18,https://bostonhacks-f2018.devpost.com/submissions/106041-bostonhacks18,"BostonHacks18

Boston Hacks 2018

To run service, first run ""python init.py""
Then type in ""localhost:5000"" into web browser.

Background of this app, currently police get texts about warnings, but they
have one screen that the texts come up on.
They are assigned in order of them coming in, and the only way to get location
is to open the text and read it. This causes the police to sort through
the data mentally/manually, and is time consuming.

On the civilian side, the people might not necessarilly save the police number.
They also might not have the time to get their exact location. Our mobile application
automatically sends a text message and geotags the location.

The message is sent to twilio, which then sends the message to the web application.
The web application determines an address from the geo coordinates of the text.
The application then puts the data on a dashboard with the text, and will
determine priority for the police (example, if multiple tips come in for location A
but only two come in for location B, then location A would be prioritized over location B)

This would allow for more efficient police deployment, and more safety for the public.

Web app located in init.py
mobile app in BostonHacks2018
",,https://github.com/ericirenzhang/BostonHacks18,,"Liberty Mutual  - Best Hack to Live Safe, Twilio — Best use of Twilio API","javascript, python, html, css, swift","Boston University, Northeastern University",,,ericirenzhang,ericirenzhang,,zhaeric@bu.edu,Boston University,2,GauthamKumarRavichandran,Gautham Kumar,Ravichandran,gautham.8b@gmail.com,theoneandonlyferrisli,theoneandonlyferrisli,,li.yuefeng.ferris@icloud.com,,,,,,,,
Weather Interact,https://bostonhacks-f2018.devpost.com/submissions/106042-weather-interact,"Inspiration

We wanted to create a project where everybody could enjoy and to an extent, feel and actually see what today's weather will be like through GIFs. Current weather applications and websites are boring, so we wanted to add a sprinkle of spice to make it interactive for the user.

What it does

When a user enters a city, they'll be able to find out the temperature of their city, with a gif provided by GIPHY, which spices up how we view the temperature!

How we built it

We first made two API calls (Openweathermap and GIPHY) based on the user's input and was receiving the data for the input's temperature. Then, based on the temperature, we use GIPHY's API to return the appropriate GIF, which was shown using HTML and CSS.

Challenges we ran into

We originally wanted to work with Twitter and Instagram's API, but realized that it takes a long time for them to return with an API key. We also had a problem with Instagram's API as we could not access their API as well.

Accomplishments that we're proud of

Although a small project, we're really proud that we managed to finish the project on time, and created something feasible.

What we learned

We learned how to make API calls, how to use data from another source and use it to our advantage.

What's next for Weather Interact

We would improve the UI of the website and definitely add more functions to weather interact as right now, we are only showing temperature.
",,https://github.com/jinyoungbang/bostonhacks2018,,Best use of GIPHY API,"python, html, css, flask",Boston University,,,jybang,Jin Young (Alex),Bang,jybang@bu.edu,Boston University,0,,,,,,,,,,,,,,,,
Hotel Safety Checker,https://bostonhacks-f2018.devpost.com/submissions/106043-hotel-safety-checker,"Our chrome extension's goal is to use the Shine API to give you a safety rating of hotel locations. It's in progress at the moment!!!
",,https://github.com/stevennx/HomeSafety,,Liberty Mutual  - Best Hack to Live Safe,"javascript, css",University of Waterloo,,,chs3578,chs3578,,chs3578@gmail.com,University of Waterloo,3,Azymic,Amy,Lu,amylu2009@gmail.com,stevennx,stevennx,,steven.xu1589@gmail.com,jxtu,JingXiu,Tu,jxtu@uwaterloo.ca,,,,
Genetic Algorithm Data Optimizer,https://bostonhacks-f2018.devpost.com/submissions/106047-genetic-algorithm-data-optimizer,"Inspiration

The ""Data for Urban Good"" stream at BostonHacks 2018.

What it does

A shop keeper has 5 departments in their store and a certain amount of inventory available that must be distributed as efficiently as possible throughout
the 5 departments depending on the demand from customers. The demand for each department can be entered as a percentage at the start of the program (must 
add up to 100% total). The cost of production of the inventory item per item as well as the selling price can be added. The goal of the program is to find
the closest to optimal supply distribution based on customer demand in order to maximize profits. Having an excess or lack of product in the face of customer 
demands will lead to a loss of potential profit.

Note: For the sake of our simulation, we make the assumption that there is a maximum of 1000 inventory items and they all cost the same to produce (5$ per item) as well as to sell (15$ per item).

How I built it

The genetic algorithm uses a ""breeding"" system which takes 2 random ""parent"" objects to create a third ""child"" object with similar values of the parents, however
a slight random variation is added. This is repeated multiple times until a specific sample size is achieved, from which we eliminate the objects that do not 
have values close to what the program desires, leaving behind the most ""successful children"" behind for further breeding. By reiterating this process several 
times, we create several generations of ""children"" which are better than the previous (meaning they have values closer to what we desire). These new values which
are close to the value we desire will provide us with the information we need. For a more precise result, we can decrease the size of the random variation, this 
would in turn cause the program to take longer to reach a point where the user would be satisfied as it there would be only be small variations every generation.
The amount of inventory items per department was displayed in html5 canvas every time a new ""child object"" was created.

Challenges I ran into

We had originally planned to do an Internet of Things project that had nothing to do with this program, however after running into a series of issues we decided a change of plan was needed.

Accomplishments that I'm proud of

As mentioned earlier, we faced a lot of issues with our original IoT idea, and so we ended up changing tracks quite late, around 10pm, 11 hours after the hackathon had started. We ended up completing a working model and experienced the highs and lows of an unsuccessful and then successful design process.

What I learned

Sometimes the program would peak at certain values over time in one simulation but slightly different values in another simulation. Although I'm not exactly sure why this happens, I believe it's due to the random variation starting with a large increase in specific values by chance, leading to different peaks for every simulation.

What's next for Genetic Algorithm Data Optimizer

By switching values in the program such as the cost of production, selling price, supply and demand, with real world datasets, we can optimize sales for use in the work world. For example, The cost of production and selling prices of inventory items can be modified to be specific per department, thus making the goal of the program to allocate the optimal amount of funds in each department. Although this program is far from being perfect, it demonstrates a working example of a simple machine learning algorithm in one of its many applications to the real world.
",,,https://s3.amazonaws.com/challengepost/zip_files/production/37999/zip_files/Optimizer.zip,[TRACK] Data for Urban Good Prize,"javascript, html5","McMaster University, University of Toronto, Sheridan College",,,RayanHussain,Rayan,Hussain,rayanh_99@yahoo.com,"McMaster University, Sheridan College",2,bonewill1999,bonewill1999,,tej20bone@gmail.com,PabloPicazo,Pablo,Picazo,pablodolphin22@gmail.com,,,,,,,,
SherLock,https://bostonhacks-f2018.devpost.com/submissions/106048-sherlock,"Inspiration

We started by brainstorming around the topic of ""Smart home."" We were originally inspired by seeking to optimize a user's experience in the most widely used area of the home: the kitchen. 

What it does

Through face recognition, we identify key features from the user in front of the camera, which ideally would be attached on the appliance. We then customize the response of the appliance to cater to that specific case. For example, one use case is that of allowing a medicine cabinet, say, to be ""sherLocked"" by having our system issue a warning if the face attempting to use it is too young. 

How we built it

We used the facial recognition api from IBM cloud and the laptop's webcam. The main UI is a website built in HTML hosted on github. We also tried to incorporate the Bose soundtouch system to issue audible responses.

Challenges we ran into

Accessing different APIs. Getting the right tools (ie. speaker)

Accomplishments that we're proud of

Getting the webcam and everything hooked up. Having a working UI.

What we learned

Much.

What's next for SherLock

There's so much room for expansion! This is only one use case that's barely fleshed out, but there could be many many more.
",,https://github.com/BANK-C/Sherlock,https://s3.amazonaws.com/challengepost/zip_files/production/38000/zip_files/index.html,"IBM - Best Use of IBM Cloud, Bose - Most creative use of Bose SoundTouch Speaker API, [TRACK] The Smart Home prize, Twilio — Best use of Twilio API","python, ibm-cloud, html, twilio, bose-soundtouch, webcam",Cornell University,,,karenf288,Karen,Fang,kf288@cornell.edu,Cornell University,4,aec273,April,Chen,aec273@cornell.edu,ChipDale729,ChipDale729,,cm749@cornell.edu,nl356,Nathalia,Lie,nl356@cornell.edu,beaubeau,,,bs655@cornell.edu
Panic/React,https://bostonhacks-f2018.devpost.com/submissions/106049-panic-react,"Inspiration

Millions of veterans struggle with the debilitating effects of PTSD, including panic attacks that can freeze someone in terror and stress at a moment's notice. We wanted to help these individuals who risked their lives for our country and put our tech to doing good.

What it does

P/R monitors heart rate data from a FitBit Ionic and sets of a sequence of events when an upper threshold is reached, signifying the onset of anxiety in the wearer.

Calming music is played.

The wearer is prompted to reach out for help, and if permission is granted, an automated text goes to a trusted family member or friend that informs the contact of the wearer's distress.

How we built it

The heart rate data is pulled from the synced FitBit data using FitBit's Web API.

The threshold trip is checked via a python script, which also manages the call to the Spotify API and the Twilio message command to the family member/friend. Audio is played with VLC.

Challenges we ran into

Authentication for FitBit is (thankfully) involved for security reasons. Sync rate and other latency leads to lag on the real-time nature of the data.

Accomplishments that we're proud of

We're proud of the system integration of many new tools and technologies that we haven't worked with before!

What we learned

We learned a lot about the OAuth process, as well as the benefits and challenges of working with python API wrappers.

What's next for Panic/React

The prototype in python does not allow for low-latency data usage, so porting this proof-of-concept into an onboard FitBit + companion mobile application or companion smart speaker application would be the next step. We also hope to incorporate more of a backend so that the threshold heart rate can be dynamically calculated as a deviance from the average, which is more consistent with the science of anxiety attacks.
",,,https://s3.amazonaws.com/challengepost/zip_files/production/38026/zip_files/PR.zip,"Liberty Mutual  - Best Hack to Live Safe, [TRACK] The Smart Home prize, Twilio — Best use of Twilio API, [TRACK] Giving Back to Veterans Prize","twilio, python, spotify, fitbit, vlc","Brown University, Boston University, Concordia University",,FitBit Ionic,june_ge,June,Ge,june_ge@brown.edu,"Brown University, Concordia University, Boston University",2,MadReza,Reza,M,rezmaza@gmail.com,ysman,Sing Yu,Yeung,ysman@bu.edu,,,,,,,,
djSafewhey,https://bostonhacks-f2018.devpost.com/submissions/106052-djsafewhey,"Safewhey

Google Maps + Liberty Mutual Insurance API for recommending safe routes

Getting Started

Install:

$ pip3 install flask googlemaps numpy

Run Windows:

$ python server.py

Run mac os

$ python3 server.py

Open localhost:5000 on a web browser
",,https://github.com/cumason123/Safewhey,,"Liberty Mutual  - Best Hack to Live Safe, [TRACK] Data for Urban Good Prize, Best use of Google Cloud Platform","javascript, python, html, flask, shine-api",Boston University,,,wisdomtt,Curtis,Mason,curtismichaelmason@gmail.com,Boston University,2,nasencio,Nicholas,Asencio,nasencio@bu.edu,djphilip,Damani,Philip,djphilip@bu.edu,,,,,,,,
ScamBusters,https://bostonhacks-f2018.devpost.com/submissions/106053-scambusters,"Inspiration

Our team wanted to build something to solve a real problem and increase safety in our society. A common experience for all of us was receiving scam calls but not knowing whether they should be answered and how to respond. So we decided to tackle this problem by building an Android App specifically to detect these calls and notify you before you give away important information.

What it does

ScamBusters deals specifically with detecting/classifying a call as a scam and then gives you a series of responses that you can make to the scam caller. You no longer have to do nothing when you receive a scam call, you can respond with your own classic songs.

How we built it

We built this project with love using Android Studio, Java, Twilio and the WhitePages Phone Reputation API.

Challenges we ran into

We were all beginners to Android Studio, but had experience with Java. The biggest challenge was understanding how to interact with the Android System to access call log information, making API calls and outdated documentation.

Accomplishments that we're proud of

Our biggest accomplishment is getting to a working MVP! 

What we learned

So much! We learned how to work as a team, new frameworks and lots of concepts in Android.

What's next for ScamBusterz

Building a safer world and equipping average people to fight back against scam. In our next iteration, we'll build a feature to tell you in real time whether the incoming number is a known scam.
",,https://github.com/ScamBusterz/ScamBusterz,,"Liberty Mutual  - Best Hack to Live Safe, Twilio — Best use of Twilio API","java, python, twilio, android-studio","Boston University, Northeastern, Western University, University of Toronto",,,xkatharinerussell,Katharine,Russell,katharinezrussell@gmail.com,,0,,,,,,,,,,,,,,,,
valU,https://bostonhacks-f2018.devpost.com/submissions/106054-valu,"According to Forbes.com, GenZ defined by their ability to rewrite ""rules that favor liberal viewpoints on things like race, gender, identity, and sexuality."" Values are an increasingly important aspect of new job seekers' efforts to join the work-force, and many companies consequently emphasize corporate culture and core values while marketing available roles. 

ValU provides a curated resource for individuals to learn about companies that may align with their top ranked values and priorities with regards to corporate culture. Our website provides visual displays of information scraped from Indeed and other data sets regarding corporate diversity, so that user's may hear directly from others like them in a visual, clear, and easily discernible manner. 

Our project is broken down into several parts: data scraping, followed by sentiment and syntax analysis, data organization, data visualization, and front-end development. 

We scraped the data from Indeed using R and reconciled the companies in the database with the scraped data. We created tables with 1000 reviews for each of the companies we were analyzing. After scraping the review data, we passed it to our teammates to perform syntax analysis.

Using data-sets saved in the form of JSON files, we performed syntactical and sentiment analysis using Google Natural Language Processing API. Syntactical analysis provided a breakdown of the various attributes of a company's reviews,including parts-of-speech, gender, and person. Our java program parsed the JSON files to develop a count of all the adjectives mentioned in the Indeed reviews. Sentiment analysis provided a score for each company, ranging from -1 to 1, which was most positive. Google NLP also provides a magnitude to rate the intensity of sentiment within a section of text. We use averages of this data representing each company for our visuals.

This information was all consequently passed along in csv format and was used to create a SQLite database.

Top Sources:


https://cloud.google.com/natural-language/docs/analyzing-sentiment
Google Cloud Shell
https://cloud.google.com/sdk/gcloud/reference/alpha/cloud-shell/scp
https://webkul.com/blog/iterate-through-jsonobject-in-java-android/
https://cloud.google.com/shell/docs/
https://cloud.google.com/natural-language/docs/analyzing-syntax

",,https://github.com/Snehaskr/valU,,Best use of Google Cloud Platform,"html, css, java, javascript, r, sqlite",Northeastern University,Google Cloud Platform,,amrita-suresh,amrita-suresh,,suresh.am@husky.neu.edu,Northeastern University,4,sbps1,,,like.c@husky.neu.edu,snehaskr,Sneha,Shivakumar,snehaskr@gmail.com,madiha247,madiha247,,alamm3@bxscience.edu,SeldereyFeed,SeldereyFeed,,latukhin.m@husky.neu.edu
Victory,https://bostonhacks-f2018.devpost.com/submissions/106056-victory,"Inspiration

Veterans risked their lives to let us sit in the comfort of our home. It’s time to give back and create solutions for problems countless veterans face every day.

What it does

Victory is a social interaction, networking, and community web app intended to encourage people to help the veterans in their transition into society and promote inclusion. Users can post thank you messages, inspirational quotes, etc every day and give the veterans the psychological support that they deserve. Victory lets users post course offerings and job listings to help the veterans acquire essential skills and provide a platform to quick-start their civilian careers. The application also provides a medium to donate and financially support the veterans. Users can also search through various events, posts and photos.

How we built it

We developed the front-end styling for the website using HTML5, CSS3 and W3.CSS. We programmed the back-end server connection with Python Flask. The application and the website database are hosted on the Google Cloud Platform. Authorize.net is used to create a safe Gateway for payments when users donate and help the veterans. We use the Twilio API to send a broadcast message to all users through the web app whenever a new event is posted by a user to always keep the veterans updated about meetups and fun events happening around them. User search is implemented using the Algolia API.

Challenges we ran into

Using the Firebase DB and integrating it into the application. Integration of the Authorize.net API, Twilio API and deployment on the Google Cloud Engine. 

Accomplishments that we're proud of

Victory can act as a a bridge between the veterans and the civil society and help them in better inclusion.

What we learned

We came across a lot of new APIs and interfaces that we integrated with our application like Authorize.net, Twilio API, etc. We also had the opportunity to talk to and connect with a veteran and understand what he and others like him go through during the rough phase of returning back to normalcy.

What's next for Victory

We plan to research and get more information about problems faced by the veterans and come up with more effcient solutions. We also plan to improve the payment gateway and make payment transactions easier to track.
",,https://github.com/Abhisathy/Victory,,"Best use of Algolia, Best use of Authorize.net, [Weekly Challenge] Best Social Good Hack from Fidelity, Best use of Google Cloud Platform, Twilio — Best use of Twilio API, [TRACK] Giving Back to Veterans Prize","python, flask, html5, w3, css3, authorize.net, google-cloud, firebase, twilio, algolia",Boston University,"Google Cloud Platform,Algolia,Authorize.net",,Abhisathy,Abhinav,Sathiamoorthy,abhisat@bu.edu,Boston University,2,harshad16,Harshad Reddy,Nalla,harshadreddy16@gmail.com,samba693,Sambasiva Rao,Gangineni,sambasivarao693@gmail.com,,,,,,,,
mo0w,https://bostonhacks-f2018.devpost.com/submissions/106058-mo0w,"Inspiration

Often I share giffs with friends and family to express emotions that could not otherwise be expressed in words. The motivation of the project was to use image recognition to classify emotion of 'selfies' and to recommend to you giffs to share (from giphy) to others to let them know how you are feeling.

What it does

Take a picture with your camera, or upload one from your camera library. Instead of classifying emotion, the project went a slightly different direction. Given any image that you share, the application recommends to you giffs that are proportional to what you see in front of you.

How I built it

Using the Microsoft Computer Vision API and the giphy search api. The client communication with these services is all done in html/css/js. Using firebase for hosting.

Challenges I ran into

Convincing my teammates to help (they just wanted to do homework!)

Accomplishments that I'm proud of

It is not the most beautiful thing in the world but I am impressed that it works!! 

What I learned

I learned that you never want to screw around with 'octet-streams' when needing to pass an image in a post request.

What's next for mo0w

Refining the recommendation service. Creating several more features (including catering more to the original idea). 
For the future, enable those who may have a difficult time understanding other peoples emotions 
(based on non-verbal cues i.e. some on the Autistic Spectrum) 
by allowing them to take pictures and see expressions in movement (through playful giffs) to aid in understanding what others may be feeling. 
",,https://m-o-0-w.firebaseapp.com/,,"Spark! Fellowship Award, Best use of GIPHY API","microsoft-computer-vision-api, giphy-search-api, html, css, fun",Boston University,,,qpotos,Richard,K,qpotos@gmail.com,Boston University,0,,,,,,,,,,,,,,,,
Pipes,https://bostonhacks-f2018.devpost.com/submissions/106059-pipes,"Inspiration

Right now, there are apps like Facebook that allow users to report their immediate locations to their friends, and allow them to meet-up. However, with the raising concerns of privacy in our day and age, trusting large corporations on extremely sensitive data like current location might not be everyone's cup of tea.

What it does

This app allows a user to send other users an invite link to a private location sharing map. This allows the users to know each other's locations and more easily meet up. The app doesn't limit who you can send the invite to, so many use cases are possible like a meet-up in a crowded or unknown place. This allows people to connect anonymously just like pipes connected in a house hidden from the sight of everyone inside it. Our app would not store logs of any request made to our service and would be open source.

How we built it

We used Javascript to get the location of the users from their browser and send it to our Ruby on rails back-end. We would get the users' location and display it on a map using the Google Maps API for all users. Websockets were used to update the map in real-time for any location changes from any of the users so they would not have to refresh the map constantly. 

Challenges we ran into

On a Windows machine, it was found that it was not possible to get GPS location data since our application lacked an SSL certificate. This made it difficult to test and as a result, a lot of the work had to be done on another machine.
Another problem was figuring out how to send data through separate socket channels.

Accomplishments that we're proud of

The biggest accomplishment was our perseverance through a lot of technical problems that we thought would not be solvable.

What we learned

We learned about how websockets can be useful and provide a very good user experience, and how to implement them. 

What's next for Pipes

With the main functionality implemented, we could focus on some additional features like finding the fastest route to meet between 2 users, or a chatroom where details of the location can be exchanged (3rd floor, near landmark, etc).
",,https://github.com/Wai-Lau/pipes,,"[Weekly Challenge] Best Social Good Hack from Fidelity, Best use of Google Cloud Platform","ruby-on-rails, javascript, google-maps, docker, html, erb, websockets",Concordia University,Google Cloud Platform,,amawai,Amanda,Wai,amawai@hotmail.com,"Concordia University, Montreal, Concordia University",3,thelowhangingfruit,Aman,Bhandal,aman_bhandal@live.ca,roger_lu_dude,SunXP,,roger_lu_dude@hotmail.com,Wai-Lau,Wai Lun,Lau,wl.wailau@gmail.com,,,,
Watch Dog,https://bostonhacks-f2018.devpost.com/submissions/106060-watch-dog,"Inspiration

Having veteran relatives, we were all aware of the types of hardships they deal with on a daily basis during their transition back into civilian life. An astounding amount of veterans coming back from serving their country suffer from PTSD. According to The U.S. Department of Veterans Affairs, it affects 31% of Vietnam veterans, 10% of Gulf War veterans, and 11% of Afghanistan veterans. Despite these high numbers, only around 8% of the 5 million veterans using VA care have been diagnosed with the disorder. This leaves a wide margin of veterans who do not undergo treatment for their PTSD, and who could benefit from an app like WatchDog. Apart from just veterans though, we were also well aware that many Americans suffer from general anxiety attacks every year. According to the Anxiety and Depression Assosiation of America, Anxiety disorders are the most common mental illness in the United States. Researching this information, it was clear that we as developers could develop some application to help the people around and truly make a difference in the effects of Anxiety Disorders and PTSD.

What it does

WatchDog is a tool to help those with PTSD cope and deal with anxiety attacks. Whenever they may feel a panic attack coming on, they can launch the app right from their watch face and undergo breathing exercizes, while being presented with calming images, such as pictures of loved ones. The app records and presents the users's heart rate to the user while guiding them through deep breathing. Deep breathing can help to lower their heart rate, and the user can see the results in real time as their heart rate lowers before their eyes. In the event that the breathing exercises don't help, the user can use quick toggles in the app to call or message trusted contacts, and if no one is around, the app can connect them with emergency services. In addition, the app is also able to notify the user of an increased heartrate and launch the application in the event that they are in facts suffering from an Anxiety attack and may have forgot about the applicaiton. 

How we built it

We utilized HealthKit and WatchKit on watchOS 5 to build this app.  Health was an integral part of the application. Creating a program to retrieve the heartbeat detected on the Apple watch in real time was less than ideal. After 100 + lines of code just to retrieve 2-3 numbers was a little insane. Apart from that, it was also very difficult to link the data shared between the iPhone and the Apple watch together. Digging up ancient documentation from Apple, Iw as able to develop a more updated solution to doing the task that I positive those engineers on the Apple Watch team could make a little easier. But all is good fun for me :) Finally one of the most crucial parts of the application was the datastructure that linked it altogther, while it less than challenging to make, it was an intergral part of the program and the app woudl be nothing without it. Finally Finally, detecting the heartbeat elevation was also a challenging inquiry, but one we all really enjoyed taking on to make a great product. We really hope people enjoy and use the product that we designed. Thank you 


<3 Sam


Challenges we ran into

None of us have built any apps for Apple watch before this, so we were all unfamiliar with the process. We have limited experience with iOS development and were hoping that it would be similar, but watchOS is much more limited with what you can do. These limitations required us to think of new solutions to problems we thought we had already solved. Also, a lot of Apple's documentation is outdated or written in Objective-C, which we have even less experiece with. And, to top it all off, Apple's developer portal was undergoing maitenence when the competition started, so we were unable to register our watches to build our apps on until an hour into the competition.

Accomplishments that we're proud of

We were able to successfully build an fully featured app on a platform that none of us had experience in during a very short timeline. Not only were we inexperienced with watchOS development, but we also had no experience with HealthKit, which is an integral part of our app. We were able to learn how to utilize all of these technologies during the course of the competition, and in a high stress situation not to mention ;).

What we learned

We learned a lot about WatchKit, HealthKit, and the limitations of both. WatchOS development is not for the short tempered, as a lot of tasks that are simple to do on iOS are just simply not available on watchOS. The biggest lesson we learned during this Hackathon was how to adapt and to keep persevering, even if you're on your 6th developer forum searching for the fix to that bug you've been stuck on. As long as you keep a level head and keep pushing, you can still create a successful product. We also realized the difficulty in testing HealthKit code as well. Creating an algorithm to launch the app in the event of an increased heartbeat, we were not able to test the program initiallly after creating it. Luckily for us, right when there was an hour left before our project needed to be submitted, the program started magically working all of the sudden. 

What's next for Watch Dog

If time permited, we would love to add the ability to sync your panic attack data with healthkit, and take notes as to your surroundings when the panic attack begun. This would allow users to learn from each attack, and hopefully pinpoint what kind of situations are causing them to have an episode. Empowering them with this data could enable them to either avoid these situations to the best of their ability, or seek targeted treatment from a [psychologist/psychiatrist]. The beauty of all of this is this data could be gathered from just their Apple Watch and their iPhone, which puts it in the hands of countless people suffering from PTSD and Anxiety Disorders.
",,https://bitbucket.org/holmecomputer/watchdog/src/master/,,[TRACK] Giving Back to Veterans Prize,"swift, healthkit, watchkit, watchos",UMass Dartmouth and UMass Amherst,,,jakeholme,Jacob,Holme,jakeholme@icloud.com,"University of Massachusetts - Dartmouth, University of Massachusetts Amherst",2,joshuaholme19,Joshua,Holme,joshuaholme19@icloud.com,sdubois18,Sam,DuBois,samdubois18@icloud.com,,,,,,,,
smartdoor_impenetrable,https://bostonhacks-f2018.devpost.com/submissions/106063-smartdoor_impenetrable,"Inspiration

security is so important for all people!

What it does

recognizes faces. unlocks door if correct

Accomplishments that we're proud of

it is very secure

What's next for smartdoor_impenetrable

sky's the limit
",https://www.youtube.com/watch?v=1FOODP0iwso,https://github.com/jake1k/smartdoor_impenetrable,https://s3.amazonaws.com/challengepost/zip_files/production/38004/zip_files/src.zip,"[Weekly Challenge] Best Social Good Hack from Fidelity, Liberty Mutual  - Best Hack to Live Safe, [TRACK] The Smart Home prize, Twilio — Best use of Twilio API","python, opencv, twilio","Boston University, Northeastern University, University of Toronto",,,JakeKaplow,Jake,Kaplow,jkaplow@me.com,"Boston University, University of Toronto, Northeastern University",2,MichaelGesuale,Michael,Gesuale,michael.gesuale@mail.utoronto.ca,takezoj,takezoj,,johnsontakezo@gmail.com,,,,,,,,
no stress parking,https://bostonhacks-f2018.devpost.com/submissions/106064-no-stress-parking,"Inspiration

Many of us have a driver license, and we should all know how annoying it is of finding a parking spot when you try to chase on something. So we decided to build this app to help people finding a parking spot nearby.

What it does

It is IOS app that displays the available parking lot nearby the current location of user. And an ML learning model that can identify empty parking spot from a given street view

How I built it

We used swift for IOS development, OpenCV and Tensorflow for our Machine Learning model.

Challenges I ran into

Finding data to build ML model.
Working with JSON in Swift

Accomplishments that I'm proud of

Built a Machine learning model that can identify empty parking spot from any given image.

What I learned

Building ML model
working with JSON in Swift

What's next for no stress parking

Request real-time street view for our parking recognition model
Integrate our ML model to the App
",,https://github.com/bhavrish/NSP,,,"swift, python, opencv, tensorflow",University of waterloo University of Ryerson,,,bryenxie,Bryen,Xie,bryenxie@hotmail.com,University of Waterloo,0,,,,,,,,,,,,,,,,
OurZic,https://bostonhacks-f2018.devpost.com/submissions/106069-ourzic,"Ourzic

Ally Zhu, Kai Washer, Théo Penavaire, Tigran Karapetyan, Victor Debray

_ Ourzic: your party playlist democratized. _

Inspiration

“You know what I want, what I really really want? ...To change the playlist.” We heard something along the lines of this so frequently at BostonHacks, we decided to solve this problem once and for all. Introducing: OURZIC, your party playlist democratized.

How?

The worst party is one with a sub-par playlist, and a restaurant with weird jams is just such a turn-off. This mobile app allows anyone to vote for the next song at a public event, while still allowing the host to maintain a certain degree of jurisdiction over what’s being played. 

As a user, you can join an Event Playlist by entering a code generated by the host. Users can, in real time, vote for their favourite song amongst a list of 5. The song with the most votes will be played, and the bottom three songs will replaced with a new selections to form a new voting pool. Compete with fellow party-goers to get your favorite song to the top.

As a host, you are able to select the playlist from which these voting selections are generated so as to still maintain control over your PARTY! Like this, the public gets to listen to the music they want, but party hosters are also happy. 

How we built it

The mobile application is built in react native. It integrates the spotify API to get the music and the Bose Soundtouch API to play it.
Half of the application is for the host. The other half is dedicated to the guests. Also, a server will keep track of the playlists for each event.

Challenges we ran into

We had challenges integrating all technologies together.
",,https://github.com/theo-pnv/OurZic,,"Bose - Most creative use of Bose SoundTouch Speaker API, [TRACK] The Smart Home prize","javascript, react-native","Concordia University (QC), Brown University (RI)",,,theo_pnv,Théo,Penavaire,tpenavaire@yahoo.fr,"Concordia University, Montreal, Brown University",4,VictorDebray,Victor,Debray,victor.debray@epitech.eu,Tigrankar,Tigrankar,,tigrankara@hotmail.com,kaidar457,Kai,Washer,kaiwasher1998@gmail.com,allyszhu,,,ally_zhu@brown.edu
Buddy-Squad,https://bostonhacks-f2018.devpost.com/submissions/106071-buddy-squad,"Inspiration

After hearing the Veteran speech we understood the need for veterans to feel a sense of purpose and meaning in their life after returning from deployment. 

What it does

it allows for Veterans to connect with one another in a user via their shared interest. 

How we built it

Using springBoot and Maven we built a Restful API hosted on Heroku. The frontend was developed using android-studios 

Challenges we ran into

Heroku not deploying application. 

Accomplishments that we're proud of

that it works!

What we learned

collaborating with new friends and learning to work in a team under a very stricked time constraint.

What's next for Buddy-Squad

A messaging service.
",,https://github.com/Cheeth-Keeth/Buddy-Squad,,"Liberty Mutual  - Best Hack to Live Safe, [TRACK] Giving Back to Veterans Prize","springboot, heroku, maven, java, postgressql, android-studio, eclipse","McGill,",,,Ethanitovitch,,,ethan.itovitch@mail.mcgill.ca,McGill University,3,dishayadav,,,dishayadav106@gmail.com,sgdantas,Stefano,Dantas,sgdantas1@gmail.com,BSzwimer,Benjamin,Szwimer,benji.szwimer@gmail.com,,,,
Fishvolution,https://bostonhacks-f2018.devpost.com/submissions/106073-fishvolution,"BostonHacks2018

Using machine learning, our project is meant to train a model to swim like a fish towards a destination in Unity. We used Tensorflow and wrote the scripting within Unity using C#. The Tensorflow training is written in Python, then converted into C#. We achieve fish-like motion through dividing our ""fish"" into a series of rectangular prisms connected by hinge joints. This is then inserted into simulated Unity water physics, and given a ""goal"" space to swim towards, which rewards the machine learning algorithm during the training stages. The algorithm is discouraged from moving too far away from the goal through assigning negative reward points.
",,https://github.com/juliusfrost/BostonHacks2018,,,"c#, python, css, jupyter-notebook, dockerfile, html, batchfile, unity",Boston University,,,delainerogers,Delaine,Rogers,hello_delaine@yahoo.com,Boston University,2,juliusfbu,Julius,Frost,juliusf@bu.edu,benjisg,,,benjisg@bu.edu,,,,,,,,
meet me,https://bostonhacks-f2018.devpost.com/submissions/106077-meet-me,"Inspiration more and more poole meet on tinder or craiglist and want a netural safe meeting loction

one user makes a short code, next user clicks on it and the app picks nearby bars and hotel rooms, that are equal distance from each perosn to make it 'fair'

How I built it runs django css javascript all coded by me javascript is the devil python on the backend is

<## challenges I ran into: halfway into the hackathon my teamates solod in the hopes of getting prize money, Also getting the front emd HTML and JS to just get corruent local was much hader than I thought djangos settings are not very hacakthon firendly

Accomplishments that I'm proud of I wrote most of a full stack website in 1 day and I could not imagine doing that before taking a semster off to learn web dev/ djang

What I learned

Mixing logic in front nad back end leads to tears, I need to think of even simpler stuff next

What's next for meet me

RUBY ON RAILS ITS FASRTER
",,http://meetingspot.xyz,,,"django, javascript, css3, html5",york u,,,jacob-ryb,ja,Rybalsky,jacob.rybalsky@gmail.com,York University,0,,,,,,,,,,,,,,,,
PartyQ,https://bostonhacks-f2018.devpost.com/submissions/106079-partyq,"Inspiration

What it does

How I built it

Challenges I ran into

Accomplishments that I'm proud of

What I learned

What's next for PartyQ

much
",,https://github.com/mdrobnjak/BostonHacks2018,https://s3.amazonaws.com/challengepost/zip_files/production/38009/zip_files/BostonHacks2018.zip,Twilio — Best use of Twilio API,,"Farmingdale State College, Northeastern",,,MarkDrobnjak,Mark,Drobnjak,drobnjak.crh@gmail.com,SUNY Farmingdale,0,,,,,,,,,,,,,,,,
moodSwinger,https://bostonhacks-f2018.devpost.com/submissions/106081-moodswinger,"Inspiration

We have seen veteran families where a person is too tired to be angry, he talks about the innocence and honor of young soldiers. Then he may suddenly cry and the heart of the family members breaks all over again. We developed this application where a family member can click a picture of the person and using the Bose soundtouch, it will play music based their emotional state without bothering them.

We have a web application where we click the image of the veteran and recognise the current emotion on the face of the person. After recognising it, we select a playlist based on their emotion without bothering them and help them calm down. This application has been developed keeping in mind to control the anxiety issues of the veterans and help them make a smart home.

What it does

It takes a picture of a veteran and any other person too from a live running video in our application and recognize the mood of the person on the basis of our trained model and recommends the person song playlist through Spotify, which can improve the mental state and anxiety of the person.

How we built it

Our frontend is built using Javascript and backend is built using Python. We have a constant recording video in our application and user can take a picture whenever they want to. The picture goes through ibm watson where the face portion is received then we test the image against our trained model for the emotion recognition. Our application then identifies the emotion of the person we recommend music from Spotify by identifying counter emotional songs to make them feel good and play it on Bose Soundtouch.

Challenges we ran into

Bose integration with Spotify and synchronization of the event with the backend, bose and spotify.

Accomplishments that we're proud of

We built a home automation project helping veterans and they can listen to songs according to their mood and cheer themselves up.

What we learned

We learnt pretty new things during this hackathon. We learnt about Spotify and bose soundtouch integration. we also learnt about how we can use machine learning to recommend songs on basis of person's current emotions.

What's next for moodSwinger

We can improve the performance by increasing the training data set for more accurate results and we can also use speech recognition along with emotion recognition to have a better perspective of behaviour.
",https://youtu.be/jT6flYuRLRo,https://github.com/ag6288/BostonHack-2018-MoodSwinger,https://s3.amazonaws.com/challengepost/zip_files/production/38011/zip_files/BostonHack2018.zip,"[Weekly Challenge] Best Social Good Hack from Fidelity, IBM - Best Use of IBM Cloud, Bose - Most creative use of Bose SoundTouch Speaker API, Liberty Mutual  - Best Hack to Live Safe, [TRACK] The Smart Home prize, [TRACK] Data for Urban Good Prize, Best Domain Name from Domain.com, [TRACK] Giving Back to Veterans Prize","python, javascript, node.js, bose-soundtouch, spotify, ibm-watson, ibm-watson-services, ibm-cloud",New York University,Domain.com,,ag6288,Archit,Goyal,ag6288@nyu.edu,New York University,1,as10950,Anshul,Sharma,as10950@nyu.edu,,,,,,,,,,,,
placeholder,https://bostonhacks-f2018.devpost.com/submissions/106089-placeholder,"Inspiration

placeholder

What it does

How I built it

Challenges I ran into

Accomplishments that I'm proud of

What I learned

What's next for placeholder
",,,,,,Boston University,,,ctrinh98,Christopher,Trinh,ctrinh@bu.edu,Boston University,0,,,,,,,,,,,,,,,,
Olympus,https://bostonhacks-f2018.devpost.com/submissions/106093-olympus,"Inspiration

Many current smart-home devices, such as automated vacuum cleaners, perform poorly without human intervention. Our team decided we would come up with a solution to this problem. 

What it does

Olympus is an application for Oculus Rift that allows the user to control a real-world robot powered by Raspberry Pi. The user puts on the VR headset and is met with a coordinate grid. By touching points on the coordinate grid, the user can plan a route for their robot. Upon an activation gesture, the real-world robot will trace the route drawn by the user in real-life.

How we built it

We developed an Oculus Rift ""game"" through Unity; however, this game was actually just an interface for the Oculus to send signals to a real-world robot. After the user draws a route on a coordinate grid in the VR space, Unity sends information about the route to Google Firebase. The robot is powered by a Raspberry Pi and waits for the information from the Firebase database. A Python script captures changes to this database and sends information to the robot via Wifi.

Challenges we ran into

The Alphabot Development Kit (the physical robot parts) needed heavy soldering and we had to find our own soldering iron to do so. When trying to communicate with the Raspberry Pi via wifi, one of our teammates discovered a kernel bug in the Raspberry Pi OS that caused it to drop connection. We had to flash a Ubuntu operating system to work around this. It was also difficult to get the Oculus Rift drivers and software functioning.

Accomplishments that we're proud of

We are proud of getting all of our hardware functioning despite major difficulties. We are also proud of how well we worked as a team and were able to divide up the work according to our strengths. Two of our teammates worked on developing and scripting the Oculus Rift environment and the other two set up and scripted the Raspberry Pi.

What we learned

We learned how to develop for a virtual reality environment, transfer application data using a cloud platform, program a robot using a Raspberry Pi, and efficiently divide up work between a team to maximize productivity

What's next for Olympus

This application is intended to be a proof of concept. A real product could use data from a house to assist in drawing a path matching the room the robot is located in. Also, we envision the ability to design and save preset paths for the robot to follow on a schedule.
",https://youtu.be/BBqFPujMG5I,https://github.com/zachbodi/OculusRobotControl/releases/tag/v1.0,,[TRACK] The Smart Home prize,"unity, raspberry-pi, python, google-cloud, oculus, leap-motion, c#",Boston University,,"Leap Motion,Oculus Rift",zachbodi,Zach,Bodi,zachbodi@bu.edu,Boston University,1,blabel3,Blake,Abel,blakecabel@gmail.com,,,,,,,,,,,,
Bumpify,https://bostonhacks-f2018.devpost.com/submissions/106095-bumpify,"Inspiration

We wanted to make something funny and entertaining, while learning new technologies such as recurring neural networks along the way.

What it does

Bumpify is an AI for generating rap lyrics, using a recurring neural network model which has learned from the lyrics to Billboard hits in the ""Hip-hop/R&B"" category from 2016-2018.

How we built it

We scraped our relevant songs from Billboard charts using a Python library we found on GitHub, then used another Python library we found which incorporates the Genius API to search for lyrics to those songs, and compiled a corpus for our AI to learn from in the form of a text file of all the raw text to every unique song. We used a recurring neural network Python library to generate a model based on this corpus, learning the ways in which commonly used words are ordered, to generate our own rap songs. We parse the AI's output and create a structured, better-formatted song from it, automatically creating line breaks and hooks for each song.

Challenges we ran into

Connecting our app to our domain name continues to be our biggest problem.

Accomplishments that we're proud of

What we learned

What's next for Bumpify
",,http://bumpify.org,https://s3.amazonaws.com/challengepost/zip_files/production/38013/zip_files/Bumpify_App.zip,"Spark! Fellowship Award, [Weekly Challenge] Best Social Good Hack from Fidelity, [TRACK] The Smart Home prize, [TRACK] Data for Urban Good Prize, Best Domain Name from Domain.com","python, flask, genius-api, recurring-neural-network",Northeastern University,Domain.com,,steinc,Charles,Stein,stein.c@husky.neu.edu,Northeastern University,0,,,,,,,,,,,,,,,,
P2Poll,https://bostonhacks-f2018.devpost.com/submissions/106097-p2poll,"Inspiration

Accusations and suspicions in regards to the integrity of elections have always been an issue, but in recent years, we have seen an increasing distrust in the voting process. Several controversies surrounded the recent midterm elections, from ballot harvesting and registration fraud to voter suppression. Online voting and decentralizing elections through blockchain technologies will not only boost voter participation but also allow for greater transparency in the voting process.

What it does

The distributed application identifies unique voters using public-key cryptography, and voters use both their public and private key to cast a vote on a referendum or poll, which propagates through the network until it becomes confirmed in a block by a miner. The blockchain allows individual voters to be anonymous, but keeps the immutable ledger of votes public in order to prevent fraud and tampering.

How we built it

A significant amount of time was spent brainstorming how we would implement a blockchain that would function without cryptocurrency, and shift its focus to function as a voting ledger. We built it using Python, Flask, JavaScript, and Bootstrap.

Challenges we ran into

One of the first problems we ran into was how to incentivize people to mine the blockchain data. While a common reward is paying cryptocurrency to the first one who successfully mines the block, we did not have a reliable, approved source to fund this operation (spending tax dollars would undoubtedly be a controversial debate). We decided on providing the opportunity to start their own polls and collect data they are interested in. A harder challenge was actually creating the decentralized blockchain network and the public ledger that would record the collected data. 

Accomplishments that I'm proud of

What we learned

In adapting the blockchain model for cryptocurrency to work for voting, we had to really understand the advantages and drawbacks of online transactions and a decentralized network. While there are indeed risks of outside interference from malicious hackers, this project mitigates the problems of voter suppression and voter fraud.

What's next for P2Poll
",,http://www.p2poll.com,,Best Domain Name from Domain.com,"python, flask, javascript, bootstrap","Boston University, McGill University, Ryerson University, The University of Waterloo",,,WilliamPine,William,Pine,wpine215@gmail.com,"Boston University, Ryerson University, McGill University, University of Waterloo",4,6561,Bartholomew,C.,bartconsidine@gmail.com,jeffrey-hui,Jeff,Hui,jeffrey.kl.hui@gmail.com,juliama,Julia,Ma,julia.ma@mail.mcgill.ca,YiruiRuan,Yirui,Ruan,ruanyirui@gmail.com
Iota,https://bostonhacks-f2018.devpost.com/submissions/106099-iota,"Inspiration

We were deeply moved by the image of dedicated data scientists spending all of there time walking the streets just to collect data. With 2 future data scientists on our team, we knew there had to be a better way to collect this data. So we accepted the difficult challenge of finding a new, easier way to collect data that can be completed far more often. As data junkies, we want as much data as possible.

What it does

Our code takes in a range of GPS coordinates, inputs them into the Google Roads API, which outputs a list of coordinates that makes a smooth path through the roads of Boston, then takes each coordinate and queries the Google StreetView API the get an image of the road. We then intend for future steps to include inputting these images into image recognition software, extracting the sidewalk only from those images, and running through a machine learning algorithm that has been trained with the 2014 data to score the sidewalk based on its condition.

How we built it

We utilized Google's extensive library of APIs, then scraped Google maps data through Python. We used an image recognition software (that we would be happy to give you the name of when our image recognition specialist arrives) to analyze the images, and we used QGIS, a geographic information software, to understand the 2014 sidewalk data.

Challenges we ran into

The 2014 data was stored with possibly the weirdest coordinate system that has ever existed. Intense transformations were applied to the standard coordinate system of latitude and longitude that Google Maps uses, and we had to reverse engineer the coordinate system we are accustomed to.

As is expected, machine learning and image recognition is always a challenge. (Extracting a sidewalk from the photos we downloaded is difficult.)

Getting the geographic information from Google Maps as a series of nodes that we can iterate through and scrape was more challenging than we expected when we first explored all our Google API options.

We struggled with creating a front end to display our work.

Accomplishments that we're proud of

We learned an entirely new technology: QGIS.

What we learned

How to divide work, how to communicate, how to overcome intense confusion together, how to read a shapefile, how to work with Google APIs in Python, the basics of image recognition. The list goes on and on.

What's next for Iota

Develop of decent front end, working on more detailed image recognition.
",,https://github.com/MeganFantes/Iota,,[TRACK] Data for Urban Good Prize,"python, google-maps, google-streetview-api, google-cloud, machine-learning, gis, jmp",Boston University,,,meganfantes,Megan,Fantes,meganfantes@gmail.com,Boston University,4,asifrahman479,Asif,Rahman,asifrahman479@gmail.com,keshavm02,,,km02@bu.edu,RahulArasikere,Rahul,Arasikere,arasikere.rahul@gmail.com,xingehu,Xinge,Hu,xingehu@bu.edu
Decentralized DJ,https://bostonhacks-f2018.devpost.com/submissions/106100-decentralized-dj,"Inspiration

Have you ever been at a party/event and really wanted to hear a specific song? Well, with Decentralized DJ, anyone can now can hear their favorite music! 

What it does

Decentralized DJ allows anyone with a cellphone to add their favorite music to the DJ's queue. The user may also adjust the volume of the speaker, toggle shuffle on/off, play/pause the music, and even ask what song is playing by sending a quick text message.

How we built it

We used the following:
Python on Flask to write the scripts that call the following APIs.
Bose SoundTouch control APIs to control the speaker. 
Twilio phone number and APIs to communicate via text with the speaker.
Spotify APIs to integrate Spotify with the Bose speaker, allowing for partygoers to add songs to a playlist.
Digital Ocean to create a CentOS 7 server to host the app.

Challenges we ran into

We initially struggled to use Google’s cloud platform to run a Linux instance so we switched to Digital Ocean and were able to solve this problem. Connecting the Bose speaker to the hackathon network proved to be challenging and we eventually opted for creating a mobile hotspot to connect it to.

Our team members working on the Spotify integration used a different version of Python than the team members working on the Bose and Twilio integration, we were able to refactor the code to run in Python 2.7.

Accomplishments that we're proud of

We we're proud that we were able to successfully interface with the speaker via SMS and fully integrate this functionality with Spotify. 

What we learned

Through this project, we learned how to and how not to use the Bose SoundTouch control APIs to communicate with the speaker. We learned about the challenges of integrating several different modules that were built using slightly different tools. 

What's next for Decentralized DJ

In the future, we would like to continue to add more control functionality (other playback features). We would also like to integrate a rating system for the songs, so that people can let the DJ know what kind of music they are enjoying. We would also like to explore the zone controls from the BOSE api, and see how we can utilize those to improve our app.
",,https://github.com/gdgrin/bhacks18-ddj,,"Bose - Most creative use of Bose SoundTouch Speaker API, [TRACK] The Smart Home prize, Twilio — Best use of Twilio API","python, bose-soundtouch, spotify, centos7, twilio, ngrok, flask",Boston University,,,TaylorRabbitt,Taylor,Rabbitt,trabbitt@bu.edu,Boston University,2,genegrin,Gene,Grinberg,genegrin@bu.edu,yllescas,Gabriel,Yllescas,yllescas@bu.edu,,,,,,,,
Origin,https://bostonhacks-f2018.devpost.com/submissions/106104-origin,"Inspiration

Tax payers in each country deserve to know where their money is spent

What it does

Uses blockchain to track your tax money as its paid to the government agency and from then different public departments

How I built it

Uses a simple blockchain written in node.js

Challenges I ran into

Blockchain is just tricky in general

Accomplishments that I'm proud of

Learning about blockchain for the first time

What I learned

Blockchain has many use cases one of them being immutability which I used for my project

What's next for Origin

Acquire latest datasets on tax money to make real use of this proof of concept
",,https://github.com/arpitdalmia/origin,,"Spark! Fellowship Award, Best use of Google Cloud Platform, ITG - Best Fintech Hack, Best Domain Name from Domain.com","blockchain, node.js, google-cloud, postgresql",University of Toronto,"Domain.com,Google Cloud Platform",,arpitdalmia,Arpit,Dalmia,arpit.dalmia@mail.utoronto.ca,University of Toronto,0,,,,,,,,,,,,,,,,
Lighten Müd,https://bostonhacks-f2018.devpost.com/submissions/106105-lighten-mud,"Inspiration

Conversation goes sour when you are passionate about the subject. This bot job is to make sure that you don't hurt your relationships and go past the point of no return with your colleague.

What it does

The bot detects the sentiments in the conversation and when it detects that the conversation is past a certain threshold of negative emotion, it will generate a Giphy image which is funny and related to the topic of conversation.

The Giphy popping up in the middle of a heated conversation should tend to cool down everyone and take a step back.

How we built it

Used python for coding.
Used Google-cloud-language for sentiment analysis.
Used Giphy api to retrieve related images .
Used Slack Api to create a bot to check for messages.
Used Ngork for creating a server tunnel.

Challenges we ran into

Google-cloud has a lot of security steps but just a matter of time.
First time python.
Python Post handling is horrible.

Accomplishments that we're proud of

Creating a meaningful application together. When one of us would tend to waiver and about to give up, we would see the other teammates struggling and working hard on their part.

What we learned

What's next for Lighten Müd

Progress tracking of the conversation. To follow the user and see their sentiment progression. From there, send meaningful gifs to enhance their mood further.

Would be nice to also be on different devices.
",,,,"Best use of GIPHY API, Best use of Google Cloud Platform","python, giphy, slack, google, google-cloud, google-cloud-language, sentiment-analysis","brown university, concordia university, boston university",,,MadReza,Reza,M,rezmaza@gmail.com,"Concordia University, Brown University, Boston University",2,june_ge,June,Ge,june_ge@brown.edu,ysman,Sing Yu,Yeung,ysman@bu.edu,,,,,,,,
CoderKonnect,https://bostonhacks-f2018.devpost.com/submissions/106106-coderkonnect,"CoderKonnect

This project was created for Boston Hacks 2018. When you visit a hackathon, the biggest central idea is to find a team, and work on a project. However, the process of finding a project for you to work on can be difficult. CoderKonnect aims to simplify the process of finding projects to work on. It will automatically match developers to projects based on pre-configured criterias such as preferred language and category of project.
",,https://github.com/AesirOfTheSol/CoderKonnect,https://s3.amazonaws.com/challengepost/zip_files/production/38021/zip_files/CoderKonnect.zip,,"html, php, bootstrap",Salem State University,,,AesirOfTheSol,AesirOfTheSol,,nickmotta38@gmail.com,Salem State University,1,jerrys123111,Muhammed Imraan,Shaikh,jerrys123111@gmail.com,,,,,,,,,,,,
issue-map,https://bostonhacks-f2018.devpost.com/submissions/106110-issue-map,"Inspiration

We wanted to create a website that would show the issues that people care about most. We had hoped this could eventually be expanded into something that policymakers could use to help them understand what their constituents actually care about. The IssueMap that we built is a first step toward that.

What it does

Given a user-input keyword, IssueMap collects tweets relating to the keyword, analyzes them for good, bad, or neutral sentiment, and plots marker on a map. The markers correspond to where the tweet was sent, and are colored based on the sentiment (bad = red, good = green, neutral = yellow). Searching for a new keyword clears the current markers on the map.

How we built it

We built IssueMap using React and node.js, and using Google Maps API and a sentiment analyzer.

Challenges we ran into

One challenge we faced was that every time a marker was added to the map, the entire map re-rendered. This causes the map to rapidly flicker. Under the time limitations of the project, we were not able to fix this. If we had more time, we could restructure our code to have it use Promises instead of Callbacks in order to not have the entire map re-render each time a marker is added.

Accomplishments that we're proud of

IssueMap successfully collects tweets from Twitter, reads them, finds keywords, finds sentiments, and puts markers corresponding to them on a map. We are particularly proud of how we used the Google Maps API to determine latitude and longitude from address input (from Twitter).

What we learned

We gained experience in React and Node.js, as well as using the Google Maps API to convert address inputs to latitude and longitude.

What's next for issue-map

We hope to add a translation feature so that the sentiment analysis can be applied to non-English tweets. In addition, changing the format from live collection of Tweets to being able to see the ""issue map"" for any time period would make IssueMap much more useful.
",,https://github.com/hanabatio/issue-map,,,"apis, google-maps, react, node.js",boston university,,,hanabatio,hanabatio,,hbatio@bu.edu,"Boston University, Brown University",1,reedbrown,,,reed_brown@brown.edu,,,,,,,,,,,,
Barrier Free,https://bostonhacks-f2018.devpost.com/submissions/106112-barrier-free,"Our project allows its users to say something to the Bose speaker and the speaker will then transform the audio input into text. The text will then be translated to another language through the IBM API. Then, it will be transformed back into an audio for the speaker to output. As the translation occurs, we use Giphy API to search for related gifs to be depicted in the VR headset. This helps the user to have a clearer understanding of the translation.

Our team's inspiration was to ease the communication issue that people have especially in the scenario when people are attempting to communicate when they aren't proficient in the same language. Furthermore, a tool such as this would help people attempting to learn  a new language.

Some accomplishments that we are proud of is working and creating unique and detailed scenes in Unity and working with numerous API's to create the final project. Thanks to working with a diverse group with different skillset, we were all able to learn some new topics such as Unity, working with API, and using Oculus Rift.
",,https://github.com/jiexunxu/Barrier-Free,,"Best use of GIPHY API, [Weekly Challenge] Best Social Good Hack from Fidelity, IBM - Best Use of IBM Cloud, Bose - Most creative use of Bose SoundTouch Speaker API, [TRACK] The Smart Home prize, Best Domain Name from Domain.com","unity, vr, ibm-watson, giphy, bose-soundtouch, flask, java, c#","University of Toronto, Connecticut College, Cornell University, Boston University, McMaster University",Domain.com,Oculus Rift,jiexunxu,jiexunxu,,jxx1311@yahoo.com,"Cornell University, University of Toronto, Connecticut College",2,SmitRao,Smit,Rao,smit.rao@mail.utoronto.ca,TaigoNakazawa,Taigo,Nakazawa,taigonakazawa@yahoo.com,,,,,,,,
Ursus,https://bostonhacks-f2018.devpost.com/submissions/106113-ursus,"Ursus

More and more people are wanting the convenience, elegance, and simplicity of a smart-home device, but without the costs, maintenance, and difficulty of installation. As opposed to drilling through your wall to attach a separate segment to your lights; Ursus can be directly attached onto any single toggle light switch. Utilizing the Twilio cloud communication and ngrok's servers, Ursus is a fully-functional text message based light system. Through Ursus, you can turn the lights in any room on or off at any time from anywhere. This feature is great because it means that Ursus can help you save energy by minimizing the time of light usage in your house. Ursus even comes with a ""Status"" command that tells you if your lights are currently on or off. You could even execute commands through text to set a time to set Ursus to activate the lights or deactivate the lights: ""Ursus, can you turn on the lights in 5 minutes?"" or ""Lights off in 10 mins."".
",,https://github.com/paschaligusti/Ursus,,,"python, twilio, ngrok, raspberry-pi, servo, flask",Boston University,,"Arduino 101,DragonBoard 410C",paschali,Paschal,Igusti,paschali@bu.edu,Boston University,3,henrywu,Hsin-Hung,Wu,henrywu@bu.edu,nawachk,Nawach,Kuptimanus,nawachk@bu.edu,heykjk,Kenneth,Kim,heykjk@bu.edu,,,,
BoseULTIMATE,https://bostonhacks-f2018.devpost.com/submissions/106115-boseultimate,"Inspiration

How might we use the Bose SoundTouch Notification API to improve the way we start the day?

What it does

BoseULTIMATE is a web platform that combines SoundTouch Notification API, Google Calendar API, the IBM Weather API, the IBM Cloud Text to Speech Recognition Watson API and a method implemented to randomly pick a song from your Spotify list via the SoundTouch platform to output to the Bose SoundTouch10 as a new song every morning. If specified, it can access your Google Calendar to notify you of the events you have that day. It can also tell you the weather. 

How we built it

We built it using the SoundTouch Notification API, Google Calendar API, IBM Weather API, and Flask. 

Challenges we ran into


Deploying our app to a Docker image to use the IBM Bluemix Cloud platform.
Using IBM Weather API
Using Text to Speech API
Using Google Calendar API


Accomplishments that we're proud of


Setting up Spotify list within SoundTouch platform and creating an alarm route to randomly pick a song and play it


What we learned


Learned more about Docker
Learned the SoundTouch Notification API
Learned more about the Google Calendar API
Learned more about the IBM Weather API
Learned more about the IBM Watson Text to Speech API


What's next for BoseULTIMATE

In the future, we will implement an improved alarm system that the user can set up via the platform. The platform will be able to play a song as an alarm clock, notifying the weather, and the events that you have on your calendar.
",,https://github.com/peggyxli/bostonhacks2018,,,"flask, python, html, css, ibm-bluemix-weather-api, google-calendar-api, soundtouch-audio-notification-api","City College of New York, New York University, Brooklyn College",,,LaisaBarros,Laisa,Barros,laisa.barros26@gmail.com,"The City College of New York, City College of New York of the City University of New York, The, Brooklyn College of the City University of New York, Beloit College, New York University",4,StephenWang,Stephen,Wang,wangsteven3@gmail.com,peggyxli,Peggy,Li,xpeggyxli@gmail.com,ChloeMeng,Chloe,Meng,lm3226@nyu.edu,yanlawrencee,Yan,Lawrence,yanlawrencee@gmail.com
Greencycle,https://bostonhacks-f2018.devpost.com/submissions/106117-greencycle,"Inspiration

Greencycle is a project meant to help Alexa users rethink their recycling habits and carbon impact on the planet. Instead of reinventing the recycling process, we got to start changes in the minds of people, stimulating them to make smarter solutions about their recycling and sustainability daily activities.

What it does

It is an iOS app augmented by an Alexa Skill which will collect data about a household’s lifestyle using ResearchKit and CoreMotion API and calculate their carbon impact as well as providing relevant tips about greener and smarter lifestyle (such as about recycling).

Greencycle will present users with weekly statistics of their carbon footprint in a barchart (comparing their results to average US and world ones).

How I built it

I was mostly concerntrating on building the iOS app 

Challenges I ran into

Working with charts was a challenge (that's why you won't see any in my demo but coming soon!).

Accomplishments that I'm proud of

Functionality that is there already after 24 hours of dev

What I learned

I have learnt to create amazon alexa skills 

What's next for Greencycle

Statistics display and data storage, improving the alexa skill functionality 
",,https://github.com/Juliafines/greencycle,,,"swift, alexa",Boston University,,,JuliaIgosheva,Julia,Igosheva,iiuaavi21@gmail.com,Boston University,0,,,,,,,,,,,,,,,,
FinBlock,https://bostonhacks-f2018.devpost.com/submissions/106120-finblock,"Many people share the view that there are no ""good"" ads. Those people prefer to not see any ads at all.

The problem is that the blank space taken up by the blocked ads remains unused. Our project seeks to make use of the unused space by replacing it with useful content. We will build a browser extention that will replace adds with most breaking Fintech industry news.

We called our extention FinBlock.
",,,,,javascript,Boston University,,,mkorovkin2,Michael,Korovkin,mckoro@bu.edu,Boston University,1,alexvarda,Alexander,Vardanyan,alexander.vardanyan@gmail.com,,,,,,,,,,,,
Mood2Food,https://bostonhacks-f2018.devpost.com/submissions/106124-mood2food,"Mood2Food

-Our goal
-Who we are
-Our journey
-Our project for BostonHacks
-Our future plans
-Bibliography

Our goal


Our ultimate goal is to use this mobile APP as a technological tool to help people live happier. We want to connect users' emotions with screen colors and recipe suggestions that can lift up their mood. It's a personalized tool: we do have databases for corresponding colors and recipes for a number of emotions, but we enable the users to input their own emotions, favorite colors, and food options as well and store it in our database, so that when the users use it afterwards their options will appear as well.


Who we are


Audrey Lai, Boston University, Master Student, 2019
Jessica Cheng, Northeastern University, 2020
Becca Malcom, Northeastern University, 2021
Funing Yang, Wellesley College, 2022
Yaxin Liu, Wellesley College, 2022


Our Journey

*The Initial Idea
Our inspiration stemmed from the phenomenon that people always have leftover foods (ingredients) but don't know how to make the best use of them. This phenomenon often leads to food waste which is detrimental for our environment. Therefore, we decided to make an APP to help people come up with ideas to make their food. Our initial idea was to create a mobile APP that can scan the barcode of certain ingredients and search for potential recipes using the ingredients that the users currently have, and then output the recipes to the users. 

*The Second Idea
We also have another idea (which is not entirely relevant to the first one) to assess the users' current emotions and to change the wall colors of their homes in response to their mood. Our idea is to help the readers feel happier through the changing of wall colors for colors are said to be associated with people's mood.

*Merging Ideas
Comparing our two separate ideas, we realized that maybe we can connect emotions, food, and colors together in order to achieve the effect of using food and colors as means to  lift the users' mood. That's how how we came up with our final idea for our project.

*Our Project
We've decided to build up an APP that the users can conveniently ""choose"" their emotional state at the current moment by touching a button of a emotion, then the screen will switch colors from the original default color, white, to the color corresponding to the users' current mood. At the same time, we'll provide the users with recommended recipes to make them feel better. We owe our project to a number of scholarly and popular articles of color psychology and food psychology as well as ""Yummly.com"" for recipes that we'll make a bibliography in a later section. 

We'll also enable user input to personalize user experience. By letting users to type in their current emotions and preferred colors and foods, we can store the input into our database and so that these options will appear the next time that the users open the APP. 


Our Future Goals
Although we have an array of awesome ideas, we did not enough time to work on every single one of them in the Hackathon. 
(1) Add music
Music therapy is also very popular along with food and color therapy. Therefore, we can add more music pieces as an additional tool to make the users feel better: image people cook their favorite meals when listening to music that are in best fit, and having the screen changed to their color of the day. Music, food, and colors are the simple elements that can make people's lives happier, and when you combine all of them together, we are tripling the delights! Of course, the music pieces can be personalized too!


(2) Assess the current emotions of the user using the scanner
Sometimes people can't tell their emotions for certain reasons, therefore, our technology is here to help! By scanning people's faces, extract the elements on the face and compare the emotions together, and then assess the emotion then report that to the user.

(3) Expand Our Databases
We've tried to provide the users with lists of emotions, colors, and recipes as comprehensive as possible. But due to the lack of time, the lists are still limited, and of course, we know that the connections to certain emotions, food, and colors are affected by several complicated factors. We'd like to expand our databases to fit certain cultural background, gender, age, personal preferences, etc. 

(4) Provide Explanations For Our Certain Recommendations
People are curious by nature.  Therefore, users are likely to be curious about the choices of certain colors and food related to their emotions so that we can provide brief explanations for them to satisfy people's curiosity, and it can also have educational values.

*Bibliography
https://www.behance.net/gallery/29992721/Mightype-Script-Free-Handlettered-Font
http://www.arttherapyblog.com/color-meanings-and-color-symbolism-chart.html
http://www.arttherapyblog.com/online/color-psychology-psychologica-effects-of-colors/
https://www.verywellmind.com/color-psychology-2795824
https://theocddiaries.com/fear-and-anxiety/the-five-colors-of-the-anxiety-rainbow/

https://www.cambridge.org/core/services/aop-cambridge-core/content/view/3BF21EC65DFE3A23A3590DB4CC557346/S0029665107005502a.pdf/psychology_of_food_craving.pdf
https://www.sciencedirect.com/science/article/pii/S1057740814000060 
https://foodandnutrition.org/blogs/stone-soup/relationship-food-mood/ 
https://www.sharecare.com/health/controlling-appetite/food-craving-mood 

https://www.everydayhealth.com/pictures/real-reason-youre-craving-these-foods/ 
https://www.sciencedirect.com/science/article/pii/S0031938406000102 
https://www.webmd.com/add-adhd/ss/slideshow-brain-foods-that-help-you-concentrate
http://naturallysavvy.com/eat/9-foods-that-calm-your-nerves-and-mind 

The recipes come from: 
www.yummy.com
",,https://github.com/afly6899/Mood2Food,,[TRACK] The Smart Home prize,"javascript, react-native, atom, sqlite, python","Northeastern University, Wellesley College",,Dell XPS,malcolmbec,Rebecca,Malcolm,malcolm.r@husky.neu.edu,"Northeastern University, Wellesley College",3,funingyang,,,fyang3@wellesley.edu,AnnieL66,AnnieL66,,lannie9400@gmail.com,afly6899,Audrey,Lai,lai.au@husky.neu.edu,,,,
LoserFountain,https://bostonhacks-f2018.devpost.com/submissions/106125-loserfountain,"Inspiration

We were inspired by the Twilio demo so we, knew we wanted to include the Twilio API in our project! We wanted to make a fun project to show off some of our skills while learning some new APIs!

We were also inspired by projects such as ""Twitch Plays Pokemon"" where the twitch chat can actually make commands and control the original pokemon games through those commands they have voted on!

What it does

Our application is a story generator that requires people to text words to our Twilio number in order to vote for the next word in the story. We have made a website that will interface with flask and pull the data from text files sent from the python in flask. This is so that the website will be updated with the results. So far we have the website made separately and the functionality of texting the number and voting for the top word via the command line on localhost.

How we built it

We built this project using Flask and Twilio API. We started off making a barebones HTML file to be our website and incorporating that into the flask code! Afterwards we signed up for our Twilio account, downloaded ngrok and began coding the actual sms functionality our program would have. 

Challenges we ran into

None of us were experienced with Flask in python or using the Twilio api, so it was a real learning experience. In the end, we couldn't get our website to be able to read the text files outputted by our flask file, but that flask file is fully functional!

Accomplishments that we're proud of

We're very proud that we were able to finish the flask file and get a real working implementation of our idea. In the future we'll probably come back to this project and flesh it out!

What we learned

We learned how to use Flask and the Twilio api. None of us really had any experience with either, so we had to do a lot of learning here at BostonHacks!

What's next for LoserFountain

Get fully functional updating on the website for LoserFountain, so players can see the updates of their story!
",,https://github.com/omeedth/LoserFountain,https://s3.amazonaws.com/challengepost/zip_files/production/38042/zip_files/LoserFountain.zip,Twilio — Best use of Twilio API,"flask, python, javascript, html5, css3, twilio",Boston University,,,omeedth,Alex,Thomas,aothomas@bu.edu,Boston University,3,petegilb,Peter,Gilbert,petegilb@bu.edu,Lkchau,Leo,Chau,lkbchau@gmail.com,rhodesrm,Robin,Rhodes,rhodesr@bu.edu,,,,
TruPhase,https://bostonhacks-f2018.devpost.com/submissions/106128-truphase,"Inspiration

We wanted to increase the life of the speakers by estimating the health of the drivers and Hardware. 

What it does

This web application checks the quality of your Bose SoundTouch Speaker by comparing audio files with existing database and checks the quality of the speaker drivers.

How we built it

We used HTML, CSS & Javascript for the Web-Application[Front End].
We used Python with existing API's[One-DB, Bose SoundTouch API] and have Arduino and Bose SoundTouch for Hardware interfacing.

Challenges we ran into

Using API's for the first time was a bit challenging.
Implementing multiple API's at the same time appeared to be a roadblock at first, but we got through it. 
Using flask as localhost was something we had never experienced before, and it was intriguing to use.

Accomplishments that we're proud of

We were able to put together the project in a clear and concise manner, with our ideas in place and we think we accomplished our small and humble goals for this project successfully.

What we learned

We learned that apart from coding efficiently, team-work,time-management and seamless communication between group members is of utmost importance. We also learned how to use API's, Flask and deploy web-apps, along with One-DB's cloud based Authentication services. I believe we all learned more due to the bonding we had at BostonHacks  and we believe that small goals are the key to satisfying results.

What's next for TruPhase

We hope to take this to another level and make it big by implementing numerous API's and making the world a safer space for our beloved Bose speakers.
",,https://github.com/anant-j/TruPhase,,"Bose - Most creative use of Bose SoundTouch Speaker API, OneDB - Best Use of OneDB Platform, [TRACK] The Smart Home prize","css, javascript, html, python, api",McMaster University,,,anant-j,Anant,Jain,anant.j2409@gmail.com,McMaster University,1,TANEJS4,Shivam,,tanejs4@mcmaster.ca,,,,,,,,,,,,
Gotta Go!,https://bostonhacks-f2018.devpost.com/submissions/106130-gotta-go,"Inspiration

When you gotta go, you gotta go. Not every place has easily accessible bathrooms. There are times when we really needed to use the toilet, but there was no place to go. When you really need to use the bathroom, nothing is ever fun. Our idea solves these issues with the push of a button. 

What it does

Our hack drops off portable potties which can be called from using an app. It comes from a truck and drops it off in a convenient location for both the person and the vehicle holding the toilets. .  

How we built it

Using Python and GoogleMaps API, we built an algorithm that would find a good place to drop our portapotty. 
The original proof of concept prototype was built in Ardiuno, but was eventually realized in SolidWorks. 

Challenges we ran into

None of us had used GoogleMaps API. Learning it was daunting, but we took the challenge. 
When we were building our proof of concept model with arduino, we realized we had no way of showing our design with it. We then had to transition to SolidWorks. That means that we would not be able to have a physical model for our demo. 

Accomplishments that we're proud of

Joshua: ""I learned how to use the command terminal, GoogleMaps API, and Python.""
Leslie: ""I was never really good at Python. However, we decided to use it for this hack. I think I really improved and I am proud of the code that we developed.""
Marcus: ""I an a Mechanical Engineer and I didn't know how I would fit into the team. But I think I really contributed and learned a lot. I learned about new components for robots and learned how CS majors work with engineering majors.""

What we learned

Joshua: Command Terminal, GoogleMaps API, and Python
Leslie: GoogleMaps API and Python
Marcus: Familarity with Arduino and SolidWorks

What's next for Gotta Go!

In the future, we plan on creating more of the SolidWorks components. We want to implement the crane in order to remove the portable potties from the docking station. That would be a good next step. 

As for coding, we want to finalize our algorithm in finding the right place to stop and unload the toilets. 
",,https://github.com/lxie27/gotta-go,,,"python, google-maps, dmatrix, googlemaps-api, solidworks, arduino",Northeastern University,,Arduino 101,livinglee,,,lee.marcu@husky.neu.edu,Northeastern University,0,,,,,,,,,,,,,,,,
Kirby Dodgeball,https://bostonhacks-f2018.devpost.com/submissions/106132-kirby-dodgeball,"Inspiration

We wanted to make a fun survival based game in ISL.

What it does

Shoots dodgeballs at you while you run around.

How we built it

Built it in ISL+.

Challenges we ran into

Collisions.

Accomplishments that we're proud of

Bouncing, homing, graphics.

What we learned

ISL+ is not that bad. 2/10. GIMP is helpful as well.

What's next for Kirby Dodgeball

Fixing collisions.
",,,,,isl,Northeastern University,,,keic,Christopher,Kei,kei.c@husky.neu.edu,Northeastern University,0,,,,,,,,,,,,,,,,
jobs4veterans,https://bostonhacks-f2018.devpost.com/submissions/106134-jobs4veterans,"Inspiration

Giving Back to Veterans  


Veterans risked their lives to let you sit in the comfort of your home, or at BostonHacks, and code. It’s time to give back and create solutions for problems countless veterans face every day.


Our Mission


Flip the hiring process; give organizations a resource for hiring veterans while providing veterans with a passive method to continue in their job search


What It Does

It makes the process of job hunting a seamless experience for veterans. All they have to do is put in some basic information and let us know their interests and skills. They can also upload a resume if they want.

Project Planning

Engineering Design Process (PLTW)


Define Problem : Many veterans face a difficult transition into the civilian workforce. Job skill translation can make or break initial resume screenings of vets who are used to military acronyms and lingo. If a resume does not contain the right keywords, it is unlikely to pass the initial screening. Other challenges may arise for veterans with disabilities and guardsmen/reservist with future deployments.  
Brainstorming: The first thing that came to mind while brainstorming ways to help veterans was to assist them with their transition back into the civilian workforce. Firsts things first, veterans need to find and secure a job, which can be a daunting and resource intensive task; so we set out with that.   
Research and Generate Ideas: Nowadays, most preliminary job searches start out with the internet, so we decided to make a website/platform. BUT we wanted to make it AS EASY AS POSSIBLE for veterans to get hired... so we decided to flip the traditional job search process and enable organizations (who may need to fill immediate positions) to find potential candidates and reach out to them at their own volition. Unlike competitors... our database search service will be free to use (AS A THANK YOU TO OUR VETERANS)!! Although, we may end up asking for donations to keep our servers up and running. 
Identify Criteria and Constraints: We might have tripped over some legalities without our knowledge (neither of us are lawyers). Unfortunately, the only method we could find for the public to validate a veteran's service record is by filing a SF-180 veteran status validation form. So, other than ticking a legal consent ""I hereby acknowledge that I have served in the U.S. Military and am a protected veteran"" we have yet to find a workaround for validating that our users are actual veterans. Also, neither of us were able to fully research employment and discrimination laws during the length of this BostonHacks. 
Explore Possibilities: Veterans may find a solution to our shared problem by working alongside a recruiter. However, recruiters often work within localities and are limited by their corporate partnerships. Our platform seeks to leave this search criteria open ended.  
Select an Approach: We are keeping it simple by building a website/web resource! 
Develop a Design Proposal 
Come up with a Minimum Viable Product
Test and Evaluate


How We Built It

We built our web app using Django framework, HTML5, CSS3 and JavaScript.

Challenges We Ran Into

We faced some issues while populating our home and profile pages with the entries from the database.

Accomplishments that we are proud of

Coming up with a dynamic responsive website from scratch in such less time was one of our achievements, since we were only a team of 2. Our end product, i.e. the job portal for veterans and how easy it's gonna make their job hunt, is also one of our proudest moments of the weekend.

What's next for jobs4veterans

We plan to add a lot more features like-


Advanced search with more filters
Machine Learning and Natural Language Processing algorithms to automatically match the veterans with their desired jobs and companies

",,https://github.com/kev5/getVet,,,"html5, css3, python, django",Boston University,,,ddyson1,Devin,Dyson,ddyson1@ithaca.edu,"Ithaca College, Boston University",1,kev5,Keval,Khara,kevalkhara95@gmail.com,,,,,,,,,,,,
Emergency Alert,https://bostonhacks-f2018.devpost.com/submissions/106136-emergency-alert,"Inspiration

There are many stories where people don't get immediate emergency care when they need it due to cell phones not being accurate.

What it does

Sends alerts to 911, in the click of a button, along with all the patient's medical information.  It alerts nearby people with a ring, to call for help.

How we built it

We built it using Android Studio, and programmed in Java.

Challenges we ran into

Downloading of the software, implicating the APIs, putting concepts into code.

Accomplishments that we're proud of

All being first time hackers, we make a prototype. 

What we learned

Learned to work as a team to accomplish our tasks, how to program using Android Studio

What's next for Emergency Alert

Introducing more features, such as the elevation of the user.
",,,,"Liberty Mutual  - Best Hack to Live Safe, [TRACK] Data for Urban Good Prize","java, xml, android-studio","McGill, Western, Sheridan, BU",,,David00,David,Quan,david.q778@gmail.com,Western University,0,,,,,,,,,,,,,,,,
Crime-Lite.com,https://bostonhacks-f2018.devpost.com/submissions/106137-crime-lite-com,"Inspiration

We wanted to find data that was relevant to communities and gave them information they may need at any time.

What it does

It gives a user data on if their surroundings are unsafe based on the past criminal record of the area and the number of street lights in the area, and also give visual data on how the city of Boston could become a safer place by installing street lights in certain areas.

How we built it

We used data from the official site for Boston (data.boston.gov) and created multiple python files that found the distance from a crime to the closest street light, subdivided Boston into many ""cells"" and recieved information such as the number of crimes in the area, number of lights in the area, maximum, minimum and median distance from a crime to the closest street light, and exported this information to Javascript. From there, visualizations were used that contained a mixture of JS, CSS and HTML.

Challenges we ran into

The size of the data set was incredibly large (~330,000 crimes and ~70,000 street lights to compare). Therefore, we had to use a mix of multicore processing, division of the workload into over 6000 different chunks, and simple random sampling that could run in 50 minutes using the Google Compute Engine.

Reading the data format and putting it in a graphic format using Google Maps. This included figuring out how to transport that data (CSV->JSON).

Accomplishments that we're proud of

Creating a website of our own that could be beneficial to all, finding ways to parse through incredibly large data sets in order to make the run time of the function reasonable.

What we learned

How to learn with big data, how to convert from programming languages

What's next for Crime-Lite.com

Many more revisions including more data sets, streets, and more!
",,http://crime-lite.com,,[TRACK] Data for Urban Good Prize,"python, javascript, html5, css, jdon",Northeastern,,,Koalacards,Koalacards,,deangelis.h@husky.neu.edu,Northeastern University,4,MathiasKools,Mathias,Kools,kools.m@husky.neu.edu,BolajiRotibi,Bolaji,Rotibi,brotibi@gmail.com,daio,Oliver,Dai,dai.o@husky.neu.edu,JovanJ22,JovanJ22,,psvitajj@gmail.com
TwiNotify,https://bostonhacks-f2018.devpost.com/submissions/106140-twinotify,"About a week or so back, a few Northeastern Dorms caught fire, and Northeastern has an emergency message notification service that basically sends alerts related to any emergencies near Northeastern University.  

Taking inspiration from this idea, we came up with TwiNotify.  

TwiNotify is a messaging service that broadcasts trending alerts.  

To accomplish this, we performed the following steps: 


Fetching Tweets 

Classification of Tweets 

Selection of Tweets 

Broadcasting 


Fetching Tweets: 

In order to get tweets, we used the Twitter API, and also imported data from a publicly available dataset.  

Classification of Tweets: 

We classified tweets as Relevant and Not Relevant using Logistic Regression.  

Selection of Tweets: 

We select the tweets based on their relevance using a custom algorithm that is explained separately.  

Algorithm: 

We convert the list of words with arranged by their weights over all the tweets in the test data, into a dictionary. The key is the word itself, while the rank is the rank of the word in the input list. We then iterate over list of words in all the tweets and pick out the tweets with the greatest score. Score for each of the tweets is the sum of all the words found in the tweet. 

Broadcasting:  

We use Twilio’s SMS API to then broadcast messages that we have selected.  

Scope: 

The scope of the project is currently limited to disaster-related information, but later can be broadened to other topics of interest.  
",,https://github.com/kaleketan07/TwiNotify,https://s3.amazonaws.com/challengepost/zip_files/production/38030/zip_files/TwiNotify-master.zip,"[TRACK] Data for Urban Good Prize, Twilio — Best use of Twilio API","python, numpy, pandas, sklearn, tweepy, scipy, cloud, twilio",Northeastern University,,,GrishmaAtulThakkar,Grishma Atul,Thakkar,thakkar.grishma95@gmail.com,Northeastern University,0,,,,,,,,,,,,,,,,
WUT Traffic Optimizer,https://bostonhacks-f2018.devpost.com/submissions/106145-wut-traffic-optimizer,"Inspiration

Facilitate everyday lives of the users by creating software that is easy to use and that does some good to the city by optimizing the traffic at peak hours!

What it does

Allow the user to register for our service. He would provide us with where he lives and works and at what times he goes to work and back home. Using this data we would visualize the average travel time to/from his workplace based on estimations from the Google Cloud Platform. This would help the user see that if he left earlier to work he would spend less time in traffic.
Allow the user to register how long it takes him to get out of bed until he leaves the house. Using this data we could calculate the latest time he could wake up at, get out of the house and drive to work and not be late. He could use this data to set his alarm accordingly and get more sleep.
Allow the user to register his phone number with us. We could then with the help of the Twilio API call the user and wake him up at the optimal time each day. This would replace the users normal alarm.
Integrate this functionality into google home.

How we built it

A Web Single-Page Application (SPA) built with React.js and Redux.js
An Authentication server built with Node.js
A Twilio phone server built with python and Twilio API
A data server built on top of Google Cloud Platform to get traffic data built with python

Challenges we ran into

Integrating backend with frontend and finding the appropriate framework to combine these two, considering we wanted to use some data mining techniques.

Handling a full stack web app, understanding the main ideas behind software development. 

What we learned

Link to secondary files

https://github.com/KetillG/boston-hacks-traffic-auth
",,https://github.com/KetillG/boston-hacks-traffic-optimizer,,"[TRACK] The Smart Home prize, [TRACK] Data for Urban Good Prize, Best use of Google Cloud Platform, Twilio — Best use of Twilio API","python, node.js, react, redux, scikit-learn, twilio",boston uni,,,nikhilesh19,nikhilesh1906,,nikm@bu.edu,Boston University,3,jerrywxk,Xiankang,Wu,jerrywxk@bu.edu,sjzhao,shijie,zhao,sjzhao@bu.edu,KetillGudmundsson,Ketill,Guðmundsson,ketillgudmunds@gmail.com,,,,
Momo,https://bostonhacks-f2018.devpost.com/submissions/106146-momo,"Inspiration

We miss tomigochis and wish they could text when they were about to die so we could have saved them

What it does

Momo is a virtual pet that needs your care! He lets you know when he needs to be fed or played with, and if you ignore him, he dies :(

How we built it

We used java to run the game and build momo. We also used the twilio API to make Momo call you.

Challenges we ran into

Accomplishments that we're proud of

Making Momo be able to have his mouth open when you try to feed him

What we learned

Virtual pets are nice companions for people who are lonely

What's next for Momo

We want momo to be able to call you!
",,https://github.com/maxCut/Momo,,,"java, twilio",Boston University,,,sumara523,sumara523,,sumaraali523@gmail.com,Boston University,0,,,,,,,,,,,,,,,,
text-line,https://bostonhacks-f2018.devpost.com/submissions/106153-text-line,"Inspiration

News and data offline

What it does

Summarizes and keeps you updated on the topic you text

How we built it

Python, NLTK and Twilio

Challenges we ran into

Hosting MP3 files online

Accomplishments that we're proud of

The product! Summarized news of various articles just a text away

What we learned

NLP 

What's next for text-line

Stock trends and Web-App
",,https://github.com/chaitali-ladikkar/text-line,https://s3.amazonaws.com/challengepost/zip_files/production/38034/zip_files/BostonHacks2.zip,"Twilio — Best use of Twilio API, ITG - Best Fintech Hack, Best Domain Name from Domain.com","nltk, twilio, python","Northeastern University, GWU",,,ChaitaliLadikkar,Chaitali,Ladikkar,chaitali.ladikkar@gmail.com,"Northeastern University, George Washington University",1,aTibrewala,Alok,Tibrewala,alok@gwu.edu,,,,,,,,,,,,
CracksInMaps,https://bostonhacks-f2018.devpost.com/submissions/106157-cracksinmaps,"We saw that there is a disconnect between the data collected and real life visuals. In order to combat this problem we wanted to overlay this data into google maps to properly see all of this data. By having a visualization, we hope to continue on with this project with machine learning to determine what is a crack just from pictures taken with Google Maps. 

We have faced several challenges, but we found that Google APIs were essential in our program and helped us overcome these issues. 

We're proud that as two unexperienced computer science students we are able to submit a project on a topic that we are highly interested in. We have learned a lot in this weekend and hope to continue to develop these skills in the future. 
",,,https://s3.amazonaws.com/challengepost/zip_files/production/38035/zip_files/cracksInMaps.html,,"javascript, html, googleapis",BU,,,AnAttemptWasMade,,,mahichy@bu.edu,Boston University,1,gglee,Gloria,Lee,gglee@bu.edu,,,,,,,,,,,,
Musical Therapy,https://bostonhacks-f2018.devpost.com/submissions/106158-musical-therapy,"Inspiration

What it does

How I built it

Challenges I ran into

Accomplishments that I'm proud of

What I learned

What's next for Musical Therapy

f
",,,,,,boston univeristy,,,LeithlandKilburn,Leithland,Kilburn,rochester.royal@yahoo.com,,0,,,,,,,,,,,,,,,,
Snake,https://bostonhacks-f2018.devpost.com/submissions/106159-snake,"The classic arcade game
",,http://brianch.uk/snake,,,javascript,new York University,,,devchuk,Brian,Chuk,brian_chuk@yahoo.com,,0,,,,,,,,,,,,,,,,
Please Don't Trash My House,https://bostonhacks-f2018.devpost.com/submissions/106173-please-don-t-trash-my-house,"We are a team from Montreal, where car sharing is an increasing aspect of the city's transportation. One of those companies let you see the available cars nearby and take the one you prefer. The car is unlocked from the app and locks as you leave. The inspiration came when we all realized that finding a place to sleep when traveling should be a similar experience without having to pay the large fees of hotels.

What does it do:
We have a web app that shows you the available rooms near your location. When selected, the app will ask you for a code that is displayed on an LCD on the door lock. When entered correctly, the payment passes and the door unlocks. 

How did we build it:
We used 3 components. One arduino that uses an IOT microcontroller to control the lock. A spring boot backend to control the flux of data. An Angular front end to show the map and interact with the rentals.

Problems encountered:
Compiler DO matter.
Frameworks don't always do what they promise.
Spring boot is hard to setup!

What are we proud of:
We did an incredible teamwork job and are very proud of our product and the possible scalability

We learned:
Perseverance.

What's next for Please Dont trash my house: More features, a cleaner experience and accept payments. 
",https://www.youtube.com/watch?v=4u-HuBaod_A&feature=share,https://github.com/EtienneBerube/BostonHacks18,,Best Domain Name from Domain.com,"arduino, google-maps, angular.js, nodemcu, github, netbeans, visual-studio, spring-boot",Concordia University,Google Cloud Platform,,ferdousara-parvin,Ferdousara,Parvin,parvin.ferdousara@gmail.com,"Concord University, Concordia University, Montreal",4,thomasgauvin,Thomas,,thomasgauvin.cu@gmail.com,StevenIacobellis,Steven,Iacobellis,steveniacobellis1@gmail.com,viveanban,,,viveka98@hotmail.ca,tiennebrb,Etienne,Berube,tiennebrb@gmail.com
Joke Generator,https://bostonhacks-f2018.devpost.com/submissions/106182-joke-generator,"Inspiration

At the beginning we were thinking about making something a little different and interesting. Then we came up with the idea of Joke Generator, which we believe is quite unconventional.

What it does

It reads in textual data of jokes (preferably of certain underlying type) and generates new jokes similar to those as user requests via a window GUI.

How we built it

We first parse the input data (tokenization and cleaning).
Then we run basic statistical analysis, and use linear interpolation of a trigram and bigram model for the word generation.
We used Java Swing framework for the GUI.

Challenges we ran into

Raw input file parsing; 
coming up with good algorithms for text generation;
Storing large data in memory efficiently (we also tried to use SQL database).

Accomplishments that we're proud of

The outcome is quite satisfying. The generated jokes are surprisingly following the English grammar, and are very funny at times.

What we learned

NLP. SQL. JSON. SWING.

What's next for Joke Generator

A more sophisticated model; we are currently thinking about RNN.
",,https://github.com/StrongerXi/Joke-Generator,,,"java, python, json, csv, sql, swing",Northeastern University,,,StrongerXi,Ryan,Go,ryan.guo99@gmail.com,Northeastern University,2,guptasam,Samedh,Gupta,gupta.sam@husky.neu.edu,danijj89,Danijj,,zhan.d@husky.neu.edu,,,,,,,,
VESPARK,https://bostonhacks-f2018.devpost.com/submissions/106184-vespark,"BostonHacks-veteran-social-app

An open-source social experience to help veterans to readjust to civilian life

We have been working on creating a social app for veterans to make the transition back into civilian life. We had three main goals. Passion. Purpose. Connection.

To achieve this we needed to create and app that gave Vets purpose. We decided to bring an interactive experience to real life. Vets can track their progress in completing ""Missions"", tasks that can be worked on daily that drive success in a new and unfamiliar environment. Tasks range from ""Brush up your resume"" to ""Call and old friend to catch up"". It is important to restore a sense of connection with the people in civilian life, with VESPARK its possible. In addition to missions, Veterans will be able to meet other members of the Military. Establishing connections is fun and a great way to feel welcome in an often lonely part of a veterans life. To help fuel connections on the platform, users can ""Request a Mentor"", where they will then appear in the Mentor Feed of other users in the country to reach out by message or connection request. Finally, we understand there are days that are harder than others. Sometimes all someone needs is a friend to talk to. We have created a ""LifeLine"" function to notify other users in the area, this will spark other users to reach out in help. 



We definitely bit off a lot of a team pretty new to web and app development. We broke up the project into three parts. Each member had their own part: Backend (API), SDK (to be used by the app), and an Android app as a demo. We collaborated to ensure all of our pieces would work together when the time came. The internet problems hindered our ability to get started. It took from 1pm to almost 10pm to download Android Studio and the needed Android SDKs to get started. We took the time to plan our database structure and create a framework for our backend. We also started with a tutorial Android app module. We set up an Ubuntu EC2 instance on AWS to host our MongoDB and API Service.
Ultimately we were unable to get a working demo. We have bits and pieces of the three parts that would need a few more hours to complete. We have the framework for success. This was a great, fun, learning experience.
",,https://github.com/CraftingGamerTom/BostonHacks-veteran-social-app,,[TRACK] Giving Back to Veterans Prize,"java, kotlin, spring, android-studio, android",Worcester State,,,ThomasRokicki,Thomas,Rokicki,tcrokicki@gmail.com,Worcester State University,1,arlumaal17,Arisha,Jahan,arlumaal17@gmail.com,,,,,,,,,,,,
